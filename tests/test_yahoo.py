from finance_data import YahooReader, DatasetError
import numpy as np
import pandas as pd
import pytest

class TestClassMethods:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader

    def test_crumb(self):
        assert self.reader.crumb() == ""
    
    def test_currencies(self):
        currencies = self.reader.currencies()
        assert isinstance(currencies, list)
        assert len(currencies) == 165
        assert {
            "short_name": "USD",
            "long_name": "US Dollar",
            "symbol": "USD"
        } in currencies

class TestEquity:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("AAPL")

    def test_ticker(self):
        assert self.reader.ticker == "AAPL"

    def test_name(self):
        assert self.reader.name == "Apple Inc."

    def test_isin(self):
        assert self.reader.isin == "US0378331005"
    
    def test_security_type(self):
        assert self.reader.security_type == "EQUITY"

    def test_profile(self):
        profile = self.reader.profile()
        assert all(
            entry in (
                "address1",
                "city",
                "state",
                "zip",
                "country",
                "phone",
                "website",
                "industry",
                "sector",
                "employees",
                "description",
                "executives"
            )
            for entry in profile.keys()
        )
        assert len(profile.keys()) == 12
        assert profile["address1"] == "One Apple Park Way"
        assert profile["city"] == "Cupertino"
        assert profile["state"] == "CA"
        assert profile["zip"] == "95014"
        assert profile["country"] == "United States"
        assert profile["phone"] == "408 996 1010"
        assert profile["website"] == "https://www.apple.com"
        assert profile["industry"] == "Consumer Electronics"
        assert profile["sector"] == "Technology"
        assert profile["employees"] == 154000
        assert profile["description"] == "Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide. It also sells various related services. In addition, the company offers iPhone, a line of smartphones; Mac, a line of personal computers; iPad, a line of multi-purpose tablets; AirPods Max, an over-ear wireless headphone; and wearables, home, and accessories comprising AirPods, Apple TV, Apple Watch, Beats products, HomePod, and iPod touch. Further, it provides AppleCare support services; cloud services store services; and operates various platforms, including the App Store that allow customers to discover and download applications and digital content, such as books, music, video, games, and podcasts. Additionally, the company offers various services, such as Apple Arcade, a game subscription service; Apple Music, which offers users a curated listening experience with on-demand radio stations; Apple News+, a subscription news and magazine service; Apple TV+, which offers exclusive original content; Apple Card, a co-branded credit card; and Apple Pay, a cashless payment service, as well as licenses its intellectual property. The company serves consumers, and small and mid-sized businesses; and the education, enterprise, and government markets. It distributes third-party applications for its products through the App Store. The company also sells its products through its retail and online stores, and direct sales force; and third-party cellular network carriers, wholesalers, retailers, and resellers. Apple Inc. was incorporated in 1977 and is headquartered in Cupertino, California."

        executives = profile["executives"]
        assert all(
            all(
                key in (
                    "name",
                    "age",
                    "position",
                    "born",
                    "salary",
                    "exersized_options",
                    "unexersized_options"
                )
                for key in item.keys()
            )
            for item in executives
        )

    def test_analyst_recommendations(self):
        recommendations = self.reader.analyst_recommendations()
        assert all(
            all(key in ("date", "firm", "old", "new", "change") for key in item.keys())
            for item in recommendations
        )
    
    def test_recommendation_trend(self):
        recommendation_trend = self.reader.recommendation_trend()
        assert all (key in ("today", "-1month", "-2months", "-3months") for key in recommendation_trend.keys())
        assert all (
            all(
                key in ("count", "average", "strong_buy", "buy", "hold", "sell", "strong_sell")
                for key in item
            )
            for item in recommendation_trend.values()
        )
        assert not any(
            value == np.NaN
            for value in recommendation_trend["-1month"].values()
        )
    
    def test_options(self):
        options = self.reader.options()
        assert ("calls" in options.keys()) and ("puts" in options.keys())
        assert all(
            all(
                key in (
                    "maturity",
                    "strike",
                    "symbol",
                    "last_price",
                    "bid",
                    "ask",
                    "volume",
                    "implied_volatility",
                    "itm"
                )
                for key in item.keys()
            )
            for item in options["calls"]
        )

    def test_institutional_ownership(self):
        holders = self.reader.institutional_ownership()
        assert isinstance(holders, list)
        assert all(
            all(
                key in (
                    "date",
                    "company",
                    "percentage",
                    "shares",
                    "value"
                )
                for key in item.keys()
            )
            for item in holders
        )

    def test_fund_ownership(self):
        funds = self.reader.fund_ownership()
        assert isinstance(funds, list)
        assert all(
            all(
                key in (
                    "date",
                    "fund",
                    "percentage",
                    "shares",
                    "value"
                )
                for key in item.keys()
            )
            for item in funds
        )

    def test_insider_ownership(self):
        insider = self.reader.insider_ownership()
        assert isinstance(insider, list)
        assert all(
            all(
                key in (
                    "date",
                    "name",
                    "position",
                    "shares",
                    "file",
                    "latest_trade"
                )
                for key in item.keys()
            )
            for item in insider
        )
        assert isinstance(insider[0]["latest_trade"], tuple)

    def test_ownership_breakdown(self):
        breakdown = self.reader.ownership_breakdown()
        assert all(
            key in (
                "insider_ownership",
                "institutions_ownership",
                "institutions_ownership_float",
                "count_institutions"
            )
            for key in breakdown.keys()
        )

    def test_insider_trades(self):
        trades = self.reader.insider_trades()
        assert isinstance(trades, list)
        assert all(
            all(
                key in (
                    "date",
                    "name",
                    "position",
                    "shares",
                    "value",
                    "file",
                    "text"
                )
                for key in item.keys()
            )
            for item in trades
        )

    def test_esg_scores(self):
        scores = self.reader.esg_scores()
        assert all(
            key in (
                "month",
                "scores",
                "involvements",
            )
            for key in scores.keys()
        )
        assert isinstance(scores["month"], tuple)
        assert all(
            key in (
                "environment",
                "social",
                "governance"
            )
            for key in scores["scores"].keys()
        )
        assert all(
            key in (
                "adult",
                "alcoholic",
                "animal_testing",
                "catholic",
                "controversial_weapons",
                "small_arms",
                "fur_and_leather",
                "gambling",
                "gmo",
                "military_contract",
                "nuclear",
                "pesticides",
                "palm_oil",
                "coal",
                "tobacco"
            )
            for key in scores["involvements"].keys()
        )

    def test_sec_filings(self):
        filings = self.reader.sec_filings()
        assert isinstance(filings, list)
        assert all(
            all(
                key in (
                    "date_filed",
                    "datetime_filed",
                    "form_type",
                    "description",
                    "url"
                )
                for key in item.keys()
            )
            for item in filings
        )

    def test_financial_statement(self):
        income = self.reader.income_statement()
        balance = self.reader.balance_sheet()
        cashflow = self.reader.cashflow_statement()
        statement = self.reader.financial_statement()
        statement_merged = self.reader.financial_statement(merged=True)

        assert statement == {
            "income_statement": income,
            "balance_sheet": balance,
            "cashflow_statement": cashflow
        }

        assert income.keys() == balance.keys()
        assert balance.keys() == cashflow.keys()
        assert cashflow.keys() == statement_merged.keys()

        key = list(income.keys())[0]
        total_variables = 0
        for item in (income, balance, cashflow):
            total_variables += len(item[key].keys())
        assert len(statement_merged[key]) == total_variables - 1 #net income on income and cf

    def test_fund_statistics(self):
        with pytest.raises(DatasetError) as exception:
            self.reader.fund_statistics()

    def test_holdings(self):
        with pytest.raises(DatasetError) as exception:
            self.reader.holdings()
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            df = self.reader.historical_data(frequency=freq)["data"]
            assert isinstance(df, pd.DataFrame)
            assert all(isinstance(date, pd.Timestamp) for date in df.index)
            assert df.index.is_unique == True

    def test_logo(self):
        assert self.reader.logo() == b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x80\x00\x00\x00\x80\x08\x02\x00\x00\x00L\\\xf6\x9c\x00\x00\t\xc9IDATx\x9c\xec\x9c]H\x15[\x1b\xc7\xf7\xcc\x9a5{\x8f\xdb}\xfc8\x87}\x8e;P\xa1\x12?*\xd2L\x02\x13-IC\xd1\x0b\xbd\xd8\x84\xd1\x07\x12\x91\xd2M\xd8M]Z \xddE\x92]\x18\x1at\x13\x9aT\xb0\x11\xf2\xca\xc8\xbc))Q\xb4(5(\xa5m)j\xb6\xb7{f\xd6\xbc\xe0\xf36l\xfaP\x0f\xc7\xe6\x19m\xfd.\x0e\x1ekZk\x9e\xff<\x1f\xf3\xac\xb5F2\x0c\xc3\xc1\xc1C\xc4\x9e\xc0\xef\x0e\x17\x00\x19.\x002\\\x00d\xb8\x00\xc8p\x01\x90\xe1\x02 \xc3\x05@\x86\x0b\x80\x0c\x17\x00\x19.\x002\\\x00d\xb8\x00\xc8p\x01\x90\xe1\x02 \xc3\x05@\x86\x0b\x80\x0c\x17\x00\x19.\x002\\\x00d\xb8\x00\xc8p\x01\x90\xe1\x02 \xc3\x05@\x86\x0b\x80\x0c\x17\x00\x19.\x002\\\x00d$\xec\t\xac\'\xe6Fc\xc6\x98\xf0\x15c\x19Q\xb4\xe9\xa3\xb6\xa9\x04\x10\x04\x811&\x8a"!\xe4\xfd\xfb\xf7\x81@`ll\xcc\xe7\xf3\xd5\xd7\xd7cO\xed\xe7\x18\x9b\x08]\xd7\r\xc3x\xf6\xecYII\x89\xa2(111\x8a\xa2\xf8\xfd~\xf8\xbd=\xd9\xf0\x1e\xc0\x18\x83g\xdf0\x8c\x85\x85\x85s\xe7\xce\xdd\xbe}\x9bR\xeat:5M#\x84\xb8\xddn\xdb\xc6\x9fM\x15\x82\xde\xbd{W[[\xfb\xe4\xc9\x13EQ\x18c\x9a\xa69\x1c\x0e]\xd7SSS\xb1\xa7\xb6\x12\x9bA\x00A\x104M\xab\xae\xae~\xf9\xf2%\xa5T\xd7uH\xbf\x84\x90P(\x94\x95\x95\x85=\xc1\x95\xb0\xafo\xae\x1dM\xd3\x8e\x1e=:::\nQU\x10\x04Q\x14!!SJ\x0b\x0b\x0b!L\xd9\x93\xcd\xe0\x01\xad\xad\xad\x81@\x00\x02=T\xa2f\x8a+//OLL\xc4\x9e\xe0J\x08\x1b\xfd\x90^0\x18LNN\xa6\x94\x8a\xa2hZ\x1f~6\x0cchh(99\x19\xc2\x14\xf6L\x7f\xcc\x06\xf6\x00\x886MMMd\x193\xce\x80\xf5#\x91HsssJJ\n\xf64Wa\xa3z\x00\x98[\xd7u\x9f\xcf\x17\x89D\xcc\xe8\x0f\xc2h\x9a\xe6\xf7\xfb\xdb\xdb\xdb\xb1\xa7\xb9:\x1b5\t\x83\xad\xfb\xfa\xfa\xe6\xe6\xe6\xcc\xe0\x03\xd6g\x8c\xed\xdf\xbf\xff\xc6\x8d\x1bv\xce\xbd&\x1bU\x00x\xde\x07\x06\x06\x08!\x9a\xa6A\xd9#\x8ab$\x12\xd9\xb7o\xdf\xbd{\xf7(\xa5\x1b\xc2\xb97\x80\x00?\xb3\xa3 \x08SSS\xe0\n\xa2(\xea\xba\xae\xaa\xea\xc5\x8b\x17\xbb\xbb\xbbcbb\xc4e\xec\xaf\xc1\x06H\xc2?+`\x18c\x7f\xff\xfd7\xa5\xd4\xe3\xf1x\xbd\xde\xc3\x87\x0f\xfb\xfd\xfe]\xbbv\x81\xd1\xcd\xc6\x9c\xe9.\x96O|M\xd87\t\xeb\xba\xfe\xf1\xe3\xc7\xe9\xe9iM\xd3<\x1e\x8f\xcf\xe7S\x14\x05\xfe\xc8,7gff\xde\xbcy\x03\x02\xfc\xf5\xd7_\x90\x8a\xc1\xe8\x8c\xb1`08;;\xab\xaa\xaa\xcb\xe5\xf2z\xbd\xf1\xf1\xf1\xd8\xf7\xf4#,o\xff\xfd\x00\xc6\x98\xaa\xaa\xd0\xb3TU\xb5\xa7\xa7\xa7\xae\xaen\xcb\x96-\x94RB\x88$I\x94R\xb7\xdb]RR\xd2\xda\xda:;;\x0b\x97@\xb5\xa3\xeb:cL_\xc60\x8c\x91\x91\x91k\xd7\xaeUTT$%%Ay\xeat:\t!\x94\xd2\x8c\x8c\x8c\x86\x86\x86\xbe\xbe>\xb8\x16.\xc4\xbeu\xc3.\x02\x80\xf9\xba\xba\xba\xb6m\xdb&\xcbrLLL\\\\\x9cg\x99\x84\x84\x04\x8f\xc7\xf3\xc7\x1f\x7f\xc4\xc7\xc7+\x8a\x92\x94\x94\xd4\xd0\xd0\x10\x0c\x06\xe1*0\xe2\xc2\xc2Bsss~~>\xb4?\xddnw\xdcW\xe0Z\xb8<66\x96\x10\x92\x9b\x9b\xfb\xf8\xf1c\x9bh`\x8b\x10d\x18\xc6\xa7O\x9f\xce\x9c9\xf3\xe0\xc1\x03\x97\xcb\x05!\x1bV\xb5\xa2#8\x84\x17\xe8t\x12B\x8a\x8b\x8b\x0b\n\n\x0c\xc3\xe8\xeb\xeb\xeb\xed\xed\r\x87\xc3.\x97\xcb,=\xe1\x07\xb3\x11\r\xf9\x00\xc4\x96e\xf9\xf3\xe7\xcfW\xae\\\xa9\xab\xab\xa3\x94\xe2\xbe\'#\x0b\x00\x16\x19\x1b\x1b;x\xf0\xe0\xfc\xfc<\xd8}\xe5K\xa0\xf5\x0fe\x0f4>\t!\xf0\xcbU\xc7\x8a\x16RU\xd5\xe3\xc7\x8f_\xbf~\xddl]\xa0(\x81Y\x86B\x10\x18\x1f\x1f\xf7\xfb\xfd\xf3\xf3\xf3\x10\x10\xd6r\x15\xa4h0=!d\x85R5\x1a\xd3\xb8\xa0\x16\xa5\xb4\xbd\xbd\xbd\xa5\xa5\x05\xfe\x17\xcb\t\x90=\x801VPP\xf0\xe2\xc5\x0bQ\x14%IRUu\x8d\x86\xf8\xef&3\x0cC\x96\xe5/_\xbe\xf4\xf6\xf6\xe6\xe5\xe5\xfd^\x1e\x00\x91\xc7\xe1p\x9c={vpp\x10b\x88\xa6ik\xbf\xff\xffb)\xf3\x917\x0c\xe3\xf2\xe5\xcb;v\xec\x80_\xa28\x01\x82\x07\x98#>\x7f\xfe\xbc\xa0\xa0\x80\x10b\xe5\x1c\x04A\xd0u\x1dJ\xdb\xa6\xa6\xa6\x93\'Ob\x99\xfe\xff\xf3A\x11\x00\x1e\xc0\x9c\x9c\x9c\x89\x89\x89\x7f\xf5\xe0\xaf\x0b\xa2(\x86\xc3\xe1\xbbw\xef\x96\x96\x96:\x1c\x0eI\xc2l\x07\xa0\x8d\xdd\xd3\xd3322\x02\xafZ\x90Q-\x1bZ\xd3\xb4\xfa\xfa\xfa\xf2\xf2r;\xb4(\x10<\x00\n\xfc\xea\xea\xea\x87\x0f\x1fZ\xbfa\xc40\x8c?\xff\xfcshh\xc8\xedv\xa3[\x1f\'\tC\xb1\xff\xe8\xd1#\xeb\x87v8\x1c\xaa\xaa666*\x8ab\x07\xeb\xa3\x95\xa1\x83\x83\x83{\xf6\xec1\x9bkV\xe2\xf5zGGG\xa1Ym\xfd\xe8\xdf\x833\x89\xfe\xfe~I\x92\xac4\x81\xd9"=r\xe4\x88\xc5u\xd7\xca\xe0\x08000 I\x92\x95K\x86\x90o#\x91Hee\xa5}\xac\x8f&\xc0\xdb\xb7o-~\xed\x84\xdaW\xd7u\xd8\xa5b\x93\xf8\x83&\xc0\xcc\xcc\x8c\xc59\x10<@\x96\xe5\xb8\xb88\x9b\xa4_\x00G\x00(\xfc\xad\x0c\x05\xe6\x91\r\xcbF\\#h\x9ehq \x96$\tr@8\x1c\xe69\xc0\x01\xcb \x16\x03ngn\xa4\xb0\t8\x02$&&\x9a\x0b^\xd6\x00O=!\xe4\xe9\xd3\xa7\xd6\xfb\xdf\n\xe0\x08\x90\x9a\x9a\n\x8b\x8bV\x0e\n\x8b0\x81@\xc0V\xc9\x00G\x80\xb4\xb4\xb4\xb5\xaf\xbd\xac\x17\xb0u\xee\xfe\xfd\xfb\xc3\xc3\xc3p~\xc6\x0e\xe0\x08\x90\x9d\x9d\x8d\xb5q\x93\x10r\xe9\xd2%X\xc8\xb4\x03\x08\x020\xc6\xf6\xee\xdd\x8b\x92\x87a\x19\xb2\xb3\xb3\xb3\xad\xad\xcd\xfa\xd1\x7f\x08\xda\x9apzz\xfa\xe4\xe4$\xca\xd0\xb0o\xb7\xbf\xbf\x7f\xfb\xf6\xed\xd1a\x10%1\xa0\xbd\x07\x14\x17\x17\xeb\xban\xfd\xb8\x92$\x85\xc3a\xc6XMM\xcd\xf8\xf8\xb8\xf9\xfcY\xfcbh\x82 \x00\xb4eJKKQ\x04\x88D"\x94R\xc6\xd8\xe8\xe8hUU\xd5\xc4\xc4D\xf42\xbd\xf5\xf3A[\x13\x0e\x87\xc3III\xd6\x97\xe4\xd1O:\xd4E7o\xde\xac\xaa\xaa\xfa\x8d\xb6\xa5\xc0M*\x8aRVV\x06N`\xfd\x1b\x99\t\x1cf\xca\xcf\xcf\x87}v\x96M\xc3\x04-\x049\x1c\x8e\xf3\xe7\xcf[\xbf%\xe2\x9b\x99\x08\x82\x00\x9b\xd7\t!(=j\x9c$\x0cq`\xf7\xee\xdd\x19\x19\x19\xe6FZ\x14\x08!\xe1p\xf8\xc4\x89\x13X\xd5 N\x08\x12\xbf\xd2\xd0\xd0\xb0\xb4\xb4\x84\xf2Z\x04\x0f\xc1\xd2\xd2\xd2\xce\x9d;+++\xb1\xcaP\xcc\xbd\xa1p\xc2"++\xeb\xc3\x87\x0f(\xb5\x00l\xb1\xbes\xe7Nii)<\x04\xbfE\x126\x11\x04\x81Rz\xec\xd81UU\xad\xaf\x02a\xb8\x94\x94\x94\xb2\xb22\xc4\xfe(\xf2\xf6t\xc6Xmm\xed\xd6\xad[\xe1\xb4\xa9\x95\xb1H\x10\x84\xa5\xa5\xa5\xa6\xa6&x;\x83\x83\xae\x96\x8dn\x82\xec\x01\x0e\x87\xe3\x9f\x7f\xfe\xa9\xab\xab\x0b\x85BN\xa7SUU\xcbF\xd7u=\'\'\xa7\xa2\xa2\x02\xb75\x8d\x7f>\x002Ann\xee\xc4\xc4\x845\xb6\x80Q$I\xea\xe8\xe8(,,\xc4\xed\x8c"\xef\xce\x80\x0f\xec9\x9d\xce\xce\xceN\x8f\xc7\x03\xa6\xf9\xa5m\x19\xc30\x08!\xaa\xaa^\xb8p\xe1\xc0\x81\x03\xe8\xabcv\xd9\x1e\x93\x96\x96v\xf5\xeaUUU\xe1\xbb\'\xbf\xee\xa9\x84\xca\'33\xf3\xd4\xa9S\x90\xf9qC\x90]\x040\x0c\xa3\xba\xba\xba\xb1\xb1qaa\x016\xac\xff\xa2Q\xe0\xe5\x0b\x1c\xce\x8c\x81\xbfb\xac5b\x8bc\xaa\xd1\xd4\xd4\xd4tuu\xc9\xb2\x1c}L5\xfakX@\xf4\x97\x08\xccS\xa8fe\x05?G\x872\xf8\xd7$I\n\x85B\x81@\xa0\xa8\xa8\xc8\xdc\x1f\x87\xeb\x01\xb6\xfbV\xc4\xad[\xb7B\xa1Pww\xb7,\xcb`\xb8\xe8\x8f1A\x04\xd7u=\x1c\x0e\x8b\xa2\x98\x98\x98\x18\x1b\x1b\x1b\x89D\x16\x17\x17\xe7\xe7\xe7EQ\x94e\xf9\xfb\xbd\xb7\x10g(\xa5sss---EEE\x86a\xe0\x1e\x8c1\xb1K\x08\x8a\xa6\xa3\xa3\xe3\xf4\xe9\xd3`b\xd3\xfap(\x15N\xc7\x1f:t\xa8\xbb\xbb;\x18\x0cNNN\xbez\xf5j||<\x18\x0c\x0e\x0f\x0f\xc3\xc6\x7fM\xd3\xcc\xe0n~\xbd\x18N\x02wvv\xd6\xd6\xd6\x9a\xa7\xd4\xb1ot\x19k\x0f\xe6\xaf\x8e\xaa\xaa\x9a\xa61\xc6\xda\xda\xda\xd2\xd3\xd3%IR\x14\xc5\xe5rQJ\x13\x12\x12\xfc~\xff\xc8\xc8\x08\x04\xee\xe8\xff\x9a\x9f\xcd]\\\\lii\xc9\xce\xce\x86o\xb7\xba\\.Y\x96\x9dNgyy\xf9\xeb\xd7\xaf\xd92\x91H\xc4>\xdf\xd2\xb5]\x0e0\x81\xf9=[\x86\x10\x92\x99\x99\x99\x9b\x9b\x0bqi\xd5\xa8\xcd\x18\x9b\x9e\x9e\xee\xef\xef\x9f\x9a\x9a\xf2z\xbdyyy>\x9f\xcf\xec\x03Zu\x07k\xc2\xbe\x02|\x93\x84\xe1\x197\x1b\x06+h\x00\xcaE\xff\x9d\xe8%0\xfbl\xc9\x02\xec+\x00\x10m\xca\xe8\xdd\x8c\xab\xda\xd1T\xeb\xfb\x84\xfc+\xe7\xfb\xaf\xb1\xbb\x00\xdf`\x87\x83\xa5\xeb\x8b\xbd\x02\xe2\xaal2\xebo<\x016\x1f\\\x00d\xb8\x00\xc8p\x01\x90\xe1\x02 \xc3\x05@\x86\x0b\x80\x0c\x17\x00\x99u\xe8\x89o\xacwi\xebY\xf9\xe5\x91{\x002\xeb\xe0\x01\x9b\xaf=`%\xdc\x03\x90\xe1\x02 \xc3\x05@\x86\x0b\x80\x0c\x17\x00\x19.\x002\\\x00d\xb8\x00\xc8p\x01\x90\xe1\x02 \xc3\x05@\x86\x0b\x80\x0c\x17\x00\x19.\x002\\\x00d\xb8\x00\xc8p\x01\x90\xe1\x02 \xc3\x05@\x86\x0b\x80\x0c\x17\x00\x19.\x002\xff\x0b\x00\x00\xff\xff\xdb\xa4\xdc\xcf^\xdeV\xe2\x00\x00\x00\x00IEND\xaeB`\x82'


def test_logo_clearbit():
    assert YahooReader("VOW.DE").logo() == b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x80\x00\x00\x00\x80\x08\x02\x00\x00\x00L\\\xf6\x9c\x00\x00B\xefIDATx\x9c\xec\xfd\x07\x9c\x94E\xb6?\x0e\x9fS\xf5<\xdd\x13\x19\x90(\xd1@V\x82\x92Q\x92\x80\x02\x82\n\x88b )\xa8\xa8\xeb\x06\xd3\xba\xea\xfd\xb9\xbb\xae\xde\xdd\xbbw\xd7M\xaeaU\x04\x03Y\xb2\xa8\x80\x88\x80" \x88\xa2\x80 Y\xc2\x003\xc3\xa4\xee~\x9e:\xe7\xfdT\xd5\xd3\x13\xba\x07f\x86Yw\xdf\xbd\x9f\x7f\xdd\xb9\xb8\x9d\xea\xa9\xaaSu\xe2\xf7\x9cr\x98\x19\xfe#\x1b%\xbd#\xfe-\xe3\xa8as\xfe\xdd\x038\xe7\x86\xff\xee\x01\xfcs\xda\xff\x11\x0203\xfegR\xe4?\x8f\x00ey&3`\xb0\xf0h\xdf\xc7\xff4:\xfc\xe7\x11\x80L\xf3}\xc5\xccDl\x8f\x82\x94(\xa5\x90\xa6\xfd\xbb\x07X\xbd\xf6\xef$\x80\x02\x16f\xf9Pokf\x024\x1b\x19\x0530\x02z\n\xb3O\xe6\x1d>vb\xdf\xc1C\xfb\x0f\x1f?x8;\xfb\xf8\xa9\xdc\x9c\xc2\x82\x82\xa2\xe2\xe2\xa8"\xa5|\xa5W\xdf\xd1\xeb\x1eNM\xc9H\x0b\xd7\xad\x93\xd9\xa0A\xddfM\xea\xb6h\xd2\xf0\xc2\xe6M\xcfoT\xaf^\xddZ\x8e\xd4\x87\xc5tn\xce\x07\xb3p\xb4\xc4f@s\x9a\xb8\xbc\xf8\xfe\x97\x9e!\xfc7jA\x9a\x81\x98!\x00\xf8\x00\xca\xd7o\xb9\xd1\x18\x1f=rr\xdb\x97\xdf~\xfc\xe9\x96ov}\xbb\xef\xd0\xe1\xc2\xe2\x98G\x0c\x84\x88\x8eY\x1daHF\x08\xa5#\'\xdd\x0b\n\x04\x04B"FbP\xae\x83\xa9)\xa1\x16M\x9b\\\xd2\xb6\xf5\x95=/\xebpi\xab\xc6\xe7\xd7M\t!\x80\'5\xa7\x92\xba+F\xfdWJ\x01\xdb\xe7\xbf\x8e\x06\xff\x1e\x02\x04\xfc\x9a\x15\xa0\xb0\x1b\xfet~d\xd3\x97;V\xaf\xf9\xe4\xd3\xcf\xbe\xd8\xb7\xffX4\x06\n\x1dbM\x1c6\xbbW\x08\t\xc1P\x83\x93\x82e\x06Nz\xe1\xf5\xdb\x82\x0c\x15t\xd7\x0c\xa4w\xbd\xd6O\x91%\xfb)a\xbc\xb0y\x83\x9e\xdd:\r\xe8\xd7\xbbK\xc7\xb6\x99\x19aD\x06V\xfa\xd7\x18*;\xba\xff\xe3\x04\xb0O$"\x10\xec)\xdc\xf6\xd5\xeew\xdf[\xbf\xf4\xdd\x8f\x8e\x9d,&R,\x90\xcd\xc2p\x19\x1e\x81\x00$\x82\x17\xac-\x00F\xbb\x7f\xe3\x8d\x80\x88}M\x00\x10B\xf3\x19\xb3\xafKgi\x98\x1d#\x12\xa1bG\x88\x86\xf53\x87\r\xed;\xe4\xea^\x9d:\xb6t\x05!;Fz\xb3\xfd\xf7\xff>\x01\x989??\xff\xdd5\xdb\xe7\xce_\xbai\xeb\xf6\x88BB\x01\n\x99\xc1\x91fY\xb5X\xf0\xcd\xf8\xf4\x19\xd1;\x18\x15 \x05\xf4\xe3`\x91\xcbO\x05\x91)8\x19(H\x8b7UzR\xd0\x01s\x9a\x88HJ\xe9\x03\t\xf0S$t\xed\xdcn\xcc\xa8\xe1C\xfbv\xca\xc8LG\x04\xa3C\xfd_!\x80\xde\x95\xc0\x12$Z\xa3\x15\x891\xe6s\xe8\xfb\x13ys\x16\xac\x98=w\xc1\xa1\xef\x8b\xf5T\x85\xfe\\\x0fB\xf9\x9a\x8b\xb3\xaby\x06F\t\\`M\x16A\x9a\x87(\xf6\xdc\x90L\t;Y\x99\xe9\xe9i\xa9\x19\x19i\xe1pXJit!\x8aF\xa3\x05\x85E\x85\x05\xc5y\xf9\x85\x91\xa8\xef\xc5\x94\x00G\xefx\xdd\xb9\x14z[+f\x97\xd1G\x8c\xe9)\x8b\xb0=#\x02\x98\x89\x9b6N\x1f3\xea\xba\x9bF\x0ejR?\xcbAO\x8f\xc1\x08f\x16\xe0\x83/A\x88\x1f\xcc\xcc\xfe\x01\t`6\x9c\x1e8\x91\x0f(\xa2>m\xdb\xbe\xef\xf57\xe6\xaf^\xbb\xf1T\x81\xcf\x18\x12\xa2\x9c;!\xc6R\x80\x8f\x0c\x9a\x8d`Q\xad\xccP\xd3&\xe7_\xda\xb6U\x8b\xa6\xe7\xb7h\xde\xa4q\xc3\xfau\xcf\xab\x9dU+=5\x1c\x0e\xb9RJ\x8c\xb3\x0b\xcd\xf2\x89Y)\x8ey\xaa8\x1a\xcd;]x\xf2T\xee\x91\xa3\xd9\xfb\x0e\x1c\xda\x7f\xf8\xc8\xf6\x1d\xbb\x0f\x1d>\x92wZ\x11\xa4\xe8\x03 |\x02\'T~\xa8\xa4\xcf\x99W\'\xc3\x1dpe\xb7\t\xb7\x8d\xeax\xc9\x05\xae`-LP\x921-~\xb8\x13\xf1C\xb2 M\x01b\xc1\x1e\xd1\xf7\xd9\x05\xd3f,\\\xb4l\xfd\xb1c\'\xb4\xc6"\x1c\xad\xb4\x08U\xf6\xeb>\xa3+"M\xea\xd7\xb9\xa4m\x9b.\x9d\xdbt\xee\xdc\xfa\xc2\x16M\xeb\x9dW\xdb5{Q\xb3\'\xe0\x80QCy\xcfO\xa0NYjP \xe0\xf5\xb7\xd0S|2\'o\xef\xfeC[\xb6\xee\xde\xbce\xc7\xf6\x9d;\x0eg\x9f\xf4(\xec`\xc2\x8e\x96L$\x8cf\xd5\xb0A\xfd\xeb\x86\xf6\xbac\xdcu\x8d\x1bd:\x02Ai\x05\xe0\x87\xa3\xc0\x0fE\x00\xd3\xadf\x0f\xb9E\xb1\xe93\x97\xbe\xfc\xea;9\xa7}%\xec\xda\x98\xb3\xa1\xf7W\xb9U\xe8\xd6\xe1\xc2\x9f?4\xb9c\x9b\x0b\xd3C\x0e\x1by\xaa\xed\xdc\xf8\xd2\xc7]\r\xc9\xbc?\xf1\xc9Fo\x02\xa3\xa4\x06d\xd0\x14b`\x82"\xcf\xdf\xb6s\xef\x7f\xff\xfe\x1f\x1b\xbf\xdc[\xfeW\xca\x8cK\x18\xea\xe9m\x7f^\xed\xd0]\x93\xae\x1f7vx\x9d\xb4\xb0\x91\x0c\xf8\x03\xd9\xd8?\x08\x01\x8cg\x06\x15\xf1g\x9bw<\xf5\xcc\x8b\xdbv\x1e"\xe1\x00*\x94J\xef\\b\xcba\x13va\xeb\xa6\xb5\x16\xcf\x7f)\xc3e\x01B\xe9\xa5\x0b\x8e~|\xde\xa5\xf3?\xd3\x88\xcb\xafP\x19\x8f\x05h\x9bY0\x12P\xa1\x8f#F\xdd\xb3\xebPn\x05\xdfE&\xb0\x1a\x9a\x00\x94By\x1d\xdb4{\xea\x17w\xf7\xb8\xbc\xad#\xd0N\xaa\x86+\x93\xdcj&[\x82\xdd\x16\xfciyF@\x1cU\xec\x9d*\x8c\xfc\xe6\x0f3&\xdc\xf3\xd4\xf6\x9d\x07\x85\x90\x12I3\x0f}\xc4\x95\x9d$\xa2J\xe8l\xe7\xbe\xc3\x1f\xad\xfb\\\xab<\xe8i\xd1\x0c\x86\tW\xb4\xdf\xf1\x0c\x7f\x155\xb3yAh3B\xf8\x80\xf8\xd1\xfa\xcfw\x1c8\x94\xf45\x9f\x98\x14\xe9\xf11\tG+\xb9\nQl\xdfyh\xe2\xdd\xbf|\xf6\x8fo\x9c*\x8c\x12xD\x11{\x1a\xa1t\xcag\xde\x0eUk5#@|\xde\xc6s@FyW\xc4\xce\xdeC\'\xc7\xdd\xf9\xd0\x8b\xd3f\x9f\x8e\xc5|\xc9\n}2\x86\xacd\x07\x88%I\xd4\x1aN\x92\x17D\xa6\xbc:m\x9e\xb1\xb2@S!\xf91\xe76\xb8\xe0\x05\x1bv&^{\xfd\x1d\x12\xe1\xc4\xefj\xf9\x1f\x12,\x81\xd8\x01\xc7\xe8G\xc4\x82Hra\xd4{a\xda\xac\xdb\xee|p\xef\xc1S\n\\E\xbe1D\x88\x81\xcf}heZM\xb5+\x0e,#\xa3I\xa2\x1e\xd6\x9a\xf5\xdb\xa6\xdc\xf3_[\xbf:D"\x04\x02\x8d\xa1)\x19\x1c\x04t!vE\xb7\x8e\xedZ57_L\xf4\x9a\xb1\x92\x9b\xb7|\xf3\xc5\xf6\xbd\xa4\x8d\xac\xe4xK\r\x1b1\xc8\xaf\xbe\xde\xbb\xe9\xf3\xed\x98L{\xbd\xf4\xaa]\xcb\xa6Wv\xef\xe0pDh\x8b\xc31\x1cSh{\x01C[\xb7\x1f\xb8c\xea\x93k>\xd9F\xc2\xaa^v\xc3Q\xcd\xd9w\x8d\x08\xc0\xc1?\xcc\xa4\x14\x83\xa7\xc4\xf2\xd5\x9f\xfd\xe8\xa1gv\x1d\xc8U\x98B\xe0\x12\xb9\x80\xa9\x00\x8edj\x98\x95\xf2\xf3\x9f\xde:\xed\x85\'\xa7N\x1e\x81p\x9a1\x968\x14\x14\x8a\xddWf\xbc\x13U\xc2\xf8\xe6\xfei4`\xc3^\xa2$^\x99\xb1@Q(Y\xa9g\x11\x13X0u\xf2u\xaf\xfd\xfd\xbf\x1e\xfb\xe9m\r\xb3\xc2\x0e)}F1L*\x04\xe0*L\xdb\xbd?\xf7\xbe\x9f=\xfd\xc1G\x1b\xa3$\x14!i~\x05g\x11HUl5\x17\xc2z\xef\xc7|\xca/\xf4\xfe\xf7/\xd3f\xce_Q\xe4\x81\xd62\xd9\x884-g9\xd5\xa5\x11\x03{=x\xff\xc4fM\xeb\x02F"\xbe\x1cy\xeb\xc3_\xec\xd0\xb2\xa1lGB\x11\x83\xeb\xc8\xa2wf\xfd\xb9s\xabf\xff\\\xc72\x13m\xddu`\xe4\xcd?\x8eR*\x83\x87\xa2\x1c\r\x98\xfdNm\x9a\xcd\x7f\xeb\xf7)\x0e!\x87\x0f\x1e\xcc\xfe\xdf\xbfO\x7fg\xc5\'QO\x08\x92\xc6\xa26NoP)\x92n\x1e}\xf5\xcf~41+=\xe4J\xe4\x1akG\xf2\xa9\xa7\x9e\xaa\xce<,\xe3\xc3\xd2\x97\xc6\x8b|\xf4d\xfe/\xff\xfb\x85\xf9\x0b?\xf2(E\xcbX\xe3)\xd0Z\x83\xf0\x9b5\xccx\xf8G\xe3\x1f\xb8gl\xfd\xf3\xd2\x10\x85\x91\xad2\x14N_\xb1\xf2S\x85\x0c\xa0\x97\xd98/\xf5D\x94\xd5\x18}\xff\xea\xfe]\xf5WK\xf9k`LW}\xa0\xe6\'%\xab\xac\xb5\xa0?\xfc\xed\xed\xad\xdb\xf7\x91\xb0\xda/"\x10\xb2^AF\x12D\x0f\xfddR\xe7\xb6\x178\xfa}\x99\x95\x15\xea\xdf\xa7{\xfdzuv\xec\xd8q\xba\xa8Xh\ta\x1cT X\xb9[\xbf\xdey\xe8\xfb#\xdd\xbat\xccH\r\x07\x1e\x90\xd2\xc1U\xdb\x99Z\xcd\x13`\x1c1q\xdbP\x1fl\x05\xf8\xdd\xc1c\x93\xef{b\xef\xc1S>\x87\x0cs\xb4:\xb8B\xf4\x07\r\xea\xf9\xcc\xe3?:\xff\xbcL\x04mQj\xe3K\xf7@EJ\x8c\xb8\xe1\xee/\x0fd\x0b\x0ek\xb9\xac\xa5\xb44G\x06\xa4\xc2\x14\x8c-_\xf8\xd76\x175\x8d\xcf\xa4d\x84\xd5%@\xc9\x19\xa2\x9d\xdf\x1d\x1er\xfd\xfd\x11\x08+\xcd\xd5\xc1:9@I%\x1c\x16\x91\xf6\xcd\xea.]\xf0r\xaaPB\x0f\xc3\xd0Eo,q\xe4\xc4\xe9\'\x9e\xfd\xdb\x07+>\x01rXK24\xfd\xa2\xe4h\x9b\x0b\xea\xbf\xf4\xd7_]\xd8\xac\xa1D6\xe7\t\xe3*Q\xf5\x0c\xe7\xea\xc9\x00\xa3#b\\\xea\x82/\xe0\xcb\xdd\xfbn\x9d\xf0\xd3\xef\xf6\xe7DYz\xe8)\xa1e\x1d2\xa4:\xfe\xaf\x1f\x9f\xfa\xd7\xdf\xfe\xbcA\x9dt\xd6\x9aCpp\xcc\xff G\xa8\xbb\xa7\xdc\x08\xac\xadL\xe3\xe9A\xfd;\xa3\xa7\x80^\x18\xf1\xf2k\xb3\tJ\xb4\xbc\xb3\xea\x99\x157,\xb3\xfa\x9a\xae/\xbf6[i\xe3\x83\xd1\xa8l\x82X/3J\x81\x82\x89\xee\xbds\x8c\x8b>jS\xcc\xaa_fS\x93\xdf\xa8^\xe6\xdf~\xf7\xd8\xff{\xe2\xde\x90k\xa2\x15(I\x10\xb2\x07\xe0\xee\xd8w\xe2\xe6\x89?\xf9f\xd7>;/s\x9e\xe8\x1c\xb4\xa2\xea\x9d\x00\xcb\x08\x84\t\x0b*\x10{\x8f\x9c\x18s\xfb\x03\xd9\xd91\x16\xa9\x84\x8a\xd0gR!\x16Y)\xf8\xfc\x1f\x9f\xb8\xb2WGW\x96\x1cI\xc3.\x83N<b\x8aD\xe1\xca\xe1S\x8e\x1f+bp\x00|\xbd\x1c\xda\xe2Wz\x83\x11\xa7\xa5\xaaOV\xbcq^f\xaa\x10\x96\xc9\x9e#\x9f\xb5a\xcb\x9c\xfc\xe2^\x83o+,\xd2\x0c^o9\x96\xfa \xea\xa9K\x81\xaaA\xa3\xb4\xf5\x8b^\x0e\xa70\x82Dt9\x98c\xa9y\x13%\xfc\xf8\xd3m\xf7\xff\xe4\xe9\xfcb\x88\tr\x08\x91\xb5\x8e$\xb8\xb8I\xbd\x949o\xfc\xa9E\xe3z\xc0JHiz\xaf\xdeX\xabw\x02l8\n\x18\x99\xc4\xb1\x13\xa7\xff\xeb\x97\x7f\xce\xce\x8e\xe8-\x0fZq\x11\n\xc2\xe86\xa8\x93\xf2\xdb\xdf<te\xaf\x8ez+\xeb\xaf\x0b3,\xcds-\x05\xf5<\x01\xc3!9\xee\xe6\xe1\x82#\xdaL5nK\xb0\x8e\x07D\x02\x99\x1f\xe1\x0fW}b\xdc\x10q\x1d\xb7\xda\x8d\xe3\x9eo\\\xb5j\xfd\xe9bf\x94h\xdc\xad\x00\xc6K\x8aZ\x18 \x15\x8f\xbfyxJ\xd8A\x14\x8c\xd2n/\xa1\x9fhi\xa5\xff\x1cR\xfdzt\xfc\xdd\xaf\x1f\xac\x9b\xe5\x86@[\xf3$X\xb0b\x96\x07\xb3\x0b\x1f\xfb\xf5\x9f\x8f\x9e\xcc7\xaa\xf3\xb9\xec\x92j\xaa\xa1\x81O\x85\t\xc5\xb3\xff\xf3\xf2\xdau_\x01\x84\xccyUH\xcae\x08\x83\xf7?\xbfyh\xc8\xa0\x1e\x12I\x18\xceh\xfddq\xa3%\x88o!J\x07\xe5m7^\x93\x99\xe60*\xe3\xee1\xf2\xd7\xfa\x1e\xa4@\x19~\xf7\xbduQ\xcf\xc6\x00\xceYO#@\x15\xf5\xfce\xef\xaf\x05\x11\x8e\x9bvh\x9e\x84\xe6\xa1\x94\x95\xe6\xde:\xfa\x1a\xe3x\x92\x96\xbd\xda\xefp0]4\xc3\x11\x0e\xd0\xb0A=\xff\xf0\xec#a\xcd\xa9\x90\xf4\x9e\xf1\xb50\x97\xa9\xab\xd7}\xf5\xf4\xef^T(\xc8\xcc\xad\xbaJe\xf5\x08@\xa4\x14\x91\xc7\xf0\xe6\xfcw\x97._\x07\x10&\xbd\xf91\xc6\x8a\x91B\xae\xff\x9b_\xdd\xdf\xef\x8a\xcb\\\x01z\xccfC\x95\xe1\xdf\xe6\xfch-\x08\x85>\xecX?+m\xd4u\xc3\xc80\x1d\xc1\xa4)\x01\x86\x05\xa3\xd6\x86>\xde\xf0\xd5\xda\r[L\xb8X\xf09l.\x1b\xec\x05o\xed\xc6\xadk6l\xb7r\xc6\x1cE\x01\x82%\xfbz\x9b\x13\x8c\xbcnX\xfd\xacT=$M\xf6 \x82\x19g\xebq\x1d@H\x94\x8e#\xa0\x7f\xef\xcb~\xf3\xcb\xfb\xd3\x1c\xb6G\x9eLdTr\xca\xb2\xe5kg\xce[\xe6\xeb\tPu\xcd\x97\xea\x11@H-N\x17-\xfd\xe8\xd7\xcf\xbc\x18e\xa9\x84\xaf\x17\x95B!\x96\xe7e\xc8\x17\x9f{r\xcc\x88\x81.\x96\x0b\x97\x9f\xa5!\xf2]\x93o\xac\x15\x06\xa9W*\xd1:\x8d\xf8<{\xfe{\n\x8c\xaaw\x0e\x861\x12 (N\x99;\xff\xbd\x98\x978\x1e\xd6\x92\x1f\xd2S\xf9\xae\xc9c*\x1dm \n\x90\xa5P\xa3G\x0c|\xf1O\x8f\xd7\xcd\x90\x8eB\xc1.\x02*\xe1\xc5\xc0\xfd\xd53/-\\\xbcZ+\xaa\xc2\xaf\xd60\xabJ\x00\xcbM\x89\xc5\xf6\x1d\xfb\x9e\xf9\xddK\x11?Lf\x83\x03\x93\x04?3\x85\x7f\xfd\xc4\x03\x03\xfa\\\xee\xa0Ue,\xae\xa4\x92\x86 \x1a7\xac\xdd\xabk{$E\x90\xe8k$\x14\xeb>\xfd2\xfbT\xbeob^\xd5\x9a\x95\x8d9\xfb\xcc\'r\xf3\xd7~\xb2\x8d\x92\xa6\xa94\x07R\xbd\xba\xb5o\xdc\xa86&\xc6\x06\x92\xc7\x19\x9f\x11bH\xf0\x80+/\xfb\xd5\xe3\xf7g\x86Y\x82bV\xc6\x97-"~\xe87\xff\xf3\xe2W;\xf6)\x10v\xad\xaa8\xce\xaa\x12\xc0\xaeNvNt\xca\x8f\x9e<\x9a[\xe4\xdb\xc3\xca(\x90\x1dY\xf4\xc7\xdf\xff|\xd8\xd5\xbd\x1d\xf0\xcc^5R\x97\x19*\x1b\x04\xb2\x90\xe0\xddz\xe3\xb0\xb0dJ\xda8\x84\x90W\xa4\xfe1m\xbe1\xa8d\xf5\xce\x80\xe6YZZ\xbe\xfc\xda\xbc\xd3\x85\xaa\x1c\x80\xc2v.\x95\xeb\xc0\xd8\xd1C\x85fq\x95\x98\xdc&\xael\x83{z\xb9\x1cV\xc3\x07\xf7\xfa\xd3\xff\xfeBb\xa1>Gf\xe7\xf8\x88\xc7\xf3"w\xfd\xe8\xbf\xb2OE\xaa\x05\xd0\xab\x94\x00V\xec\xea\xff\xf3\x19\x9e|\xfa\xef\x87\x8e\x17()\x8c\x1ea\x9f\x1d{\xf0\xa7\x93\x06\xf4\xe9\x1c\x96T"r\xb1j\xea0\x11\x0b\xc0>Wt\xe9\xd9\xa3\x93Q\xd6\x13\xe6\r,\xc4\xecw\x96\xe5\x17h\xb5\x15\x92\x16\xf1\xec\xc3f\xa0\xd3\x05\xde\xec\xf9\xcbX\x08N\xe8W\xf3&\xea\xdd\xa3S\xbf+\xba\x18\xb7g\xe5\xddY\xc7\xb8\r$!\xa0\xe3@\xbf>\x9d\x1f~h2B\xcc,6\x03\x92\x0fx\xf8X\xc1S\xbfy\xd1g V6\nT\xa9\x06Q\t\x018\x88.\x81O\xfe;\xcb\xd6,\xfa`\xad\'$1\xa3f\xd9\x02\x85w\xed\xd0>\x93o\x1f\x99*\x19\x85d\xe1\xc6aS\xd6X\xae\x84\x06BJ\x007-\xc5\xbdzP\x0f7i\x1b"k\xa3\xf4T\xbe7o\xd1J\xd6\x0c=1~p\xd6\xa6\x98\xe9\x9dE+O\x15\xc4\x8c\xe6+K=\xf7F8\x878t\xcd\xc0\x1e\xe9).\x82+De\xbb0>\x17\xbb\xadXH!D\x8a\xe4;n\xbba\xc4\xb0>(,\r\x1cc\xf1\x89\xc5\xef\xadyg\xd9\x1a\x9f\xbc \x0cW\xd9\xc9\xad\x8c\xfd\xb1\xe54\x90\x9d[\xf8\xf4o_\x12\xe0J\x02AR+m\xc0-\xce\xaf\xfd\xcc\x13?r\xe1\\,\xc0\xd2G\x00\x0e\x1d< U&:G\xcd\xb6\xd2\xba\xd1\x8c\xb7\x17E<\xe0\xca\x18E\xd9\xc6(\x8b}x\xe3\xedE\xca\x00\x12\x91\xcb\xbah4%\xd2\xdc\xd8\x90A\xfd\xa1\xcc\xbb\xd5\x1e5\xa0\xcb\xf4\x9b\xc7\x1fh\xd1\xb0\xb6\x81R\n`\x07\x01\x05\x86\x9e\xfe\xddK\xc7s\x8a,\xa8\x0c\xb9\x92\x15\xae\x8c\xf8\xba\x1b\xf2\x98\x7f\xf7\x87W\x8f\x9f,\x16$\xa4V#\x1d\x01\xe0\n\xef\x81\xa9\xe3j\xa7\xa78\x88%\xaa[5g\xc16`{^V\xea\x88!Wr\xf9\x16\xc8}\xe1\xee\xde{\xf8\xa3u\x9bU\xfc\x8dJ\xc6\x1b(\x0b\xb0f\xfd\xe6o\xf7\x1e\x06\x0c\x95\xc4\x87\x83/\x18?\xfe\xf0\xab\xaf<\xafv\x1a\xc4\xb1\xa2\xd5\x1bu\xf0\x8fp\x04\xd4\xce\x08\xff\xf8\xdeq!I\x86\x91\t\x83\t\x80\xe3\'\x8b\x7f\xff\xdc\xab\x9e\x1e\xab\xaa\xb4\xefJO\x9f\xeec\xc7\xee\xef\xdfY\xb8\x0eE\xc8\xb8\x82\x04\x82 \x15\xbd\xf1\xba\xfe7\x0c\xefg\xc2\x86\x81\x81|.\x06\x93\x11\x17\x0e\xd0]\xe3F%\xad/\x99\xd5rH\xa4\xbe\xf4\xfa\xbcj\xf5\xad\x00^z}\x1e\x89T\x027X2\x16e\xf42\x9e2aT5\xc5z\x99\x16\x0cEX\xe7\xee\xa8a\xfdo\x1a\xd1O\x80\xc7 \x14j\x1d\x1c\x853\x7f\xc1\xda\x1d\xbb\x8f\xf8P\xf9\xb6L&\x00\x97\x7f\xa1\x8ab\xfe\xdf^\x9c\xa98\x8c\xdad\r\x80\x99\xc8\xfe\xf0\xa1\xfd]Y\x8a8N\xfem\x95\x1b\x02S\xdb6\x17\x8e\x18\xd2\xcf\x15\xc6z\xb2\x87\xb7D\x98\xa3\xdc\xb4\xe5\x9b5\xeb\xb6\x98\xdeK\xf6\x14W8l\x06\xc5\x00\x1f\xaf\xdb\xbaq\xf3\xd7\x9ak1\x97\xf1M23J\xe0k\xaf\xe9\xdb\xae\xf5\x85h\x0c\xa9s\x1ap\xfcY\xc6ps\x1d\xb8vh?`\xdf\x08\x17\xc1H\x88\xa4 \xe5o/\xcd,\x8a\xf9\x0c~\x85\xbf-i\xc9\x04\xf0\xcb|\x89\x81\xfd5k>_\xb1f\xa3r=\x16\x16\xbb\x01\xc4\x0cR\xae^\xb3\x81\xb5\xc6\xa9\xec\x9c\x8d\x82P=\x1b$p<\xe8\x8d\xe4\n)\xee\xbemH\x98<\xe3\x931\x946([\x07<\x81\xca\xe3\xf0\xab3\x96\xfaZS*6\x06l\x00_(3-sz\xf4\xbb\xc5QV\xafL_\xecC\x8a@_\x1a\xcd\x985]\x15\xa3\x02\x16aVSn\x1db\xe4\xa8\x9b\x88\xbb\xa8\xea\xa8U|!I\xabr W\x7f\xbcQk\xd4\xc86\xda\xc1H\xca\xf1W\xac\xde\xb4v\xcdV\xe0\xf2\xeb\x99H\x8f\n\x08\xe0\x94\r\x83\xf8\xec\xbc\xf2\xfa\x9cH\xc4\xb3O\x16\xcc\x82m\xb0\xc5\x9d\xbd`\xe5\xe6-\xdf\x98\xaf\xfav\xf9\x93\xed\x9dj\xb5\x8e\x1dZ\x0e\xbc\xaa\x9b\xa0\x18\x92c"\xc6q\xaem\x9cG\xab?\xde\xb0q\xcb\xd7\x04)gSr\xf5\x01M\xd9\xbce\xc7G\xeb>\xb3\xba\r\x06`Odp\xb4\xfa\xc2\xd1\xab\x06t\xe9\xd4\xb1UM\xc6i\x0c\x1d\xdb\xf4\xe2n\xda\xb2c\xe6\xfc\x15\x0c\xae6\x7f\x88e<g\xa48\xea\xbd2}\xb6\xcfn\x99\xf8v\x05\x06\x7f\xf2\x92\x05S#RD\xf0\xd5\xce}\x9fo\xdbIA\xb4Ah\xc3K\x13YK\xb9\xdc\xfc\xd8\x82%\xab4EH\xefW\xb3+k\x16\x9cC\x9e8n\xa4\xa0\x88 \x14P\x9a\xbe\x89\xa6\xb1t_\x9d\xfe\x8e"i43\xc4\xf2#7\x1e&4\xfa\xbdxe\xda\\\x10nYk\x88-vN\xf3\x86\xc8\xa4\t\xa3\xdc\xea\x99\x14\x89\x8d\x8c\x83P\xf3M\xddp\xc1\x92\x95y\xdaR\xd1\xc6\xa7\xd9\x9d\xd6^\xd3O\xdc\xbcm\xe7W;\xf7\x93\t \x97\x8e\xb4|\xabx\xcf2\x13\xa2 \xc2\x17_\x9b\x1b\xe5\x14\x10\x0e\x06GN\x90~\x88\x0fB\x1f\xbd\xc5\xcb?\xce\xcd\x8fi\xaar\t\xcb>\xf7&\x00\xba^\xde\xee\xb2\x0em\xa4\xd6\x1bUBg\xbe\x08\xbd\xb7z\xd3w\x07O\x94zW\x93F\r\xc0\xfb\x0f\x9e\\\xb9z3\xa1\x9b0\x1d\x12J0w\xee\xd8\xbak\xe7\xb6\xa2f@\x92\xe0\xfc\xe9s\xe9\xe4\x15\xc4\x96,_\xab@\x18\xf2\xfa\xac\x05\x8b\xb0\xfa\x1d\xa3\x8cR\xf8\xc5W\xe7\xe8\xb5,\x89EU4\xeb\x84\x16x\xed\x89\xe0\xc8\xf7\xd9\xef}\xf01\x0b7\xb0\x15\xb5|\x11\x06\x00N\xda\xf6\x06>\x9d\x1f}{\xf62k\xe6X\xaf\x7f\x8d\x9a\t,L\x1c\x7f\x93\xde\\\xec\'\xf8\xc8|fE\xf2\xcd7\xe7\x9d\x19\x0c\xa5\xdf\x7f\xf3\xcdy\x04.\x95\xd7\xbeQ\x80OQ\x00\x9e8\xe1f\xa9\xf5\xea\x1a\xe1-\x84f\xc5\xd6F\x153\xe7.\xcf=\x1dA+\xff\x90LT,\xaen\xa1`\x11z\x7f\xc5\xc7\xdf\x7f\x7f<\xc8\xc0\x8a\xafm\xf9\xde\x12\x1b\x82\x12\x00J\t\xf5\xda\x9c\xf7<N\x15\xa8\x0c\x80\xdcf8\xc4\x04\x0bA\xc6z\x94"*\xe5Ko\xce\xcd\xc9\x8f\xdaCW\xd3\x13\xa0-c\x1cru\xb7&M}\x90"\xc1\xf2\x12\x10\x01t\xe6,X\x93S\x10!eT\xfd2\xcd\xb8\x819\xa7 2g\xd1\xc7>H\x1f\x0b\xcb}\xca\x8e\x14\xa1\x0b\x9a\xc9k\x07v\x97(\x85\xac\xd1V1\x93T 87?\xfa\xd2\x1bs=\xc7\x05-\xd2\x05\xb0\x8b(A\x1b\xc6\x9a]\x1b?\xbd\x8aQx\xda\xecw\x95\x8dj\x90\xa0$\xbb\xac\xa2\xa1h\xfa\xcaH\xd4\x7fg\xc1\xbbgwC\n\x10\xc7\xb3s\xde\x9e\xbdH\x9f\xbb3\x9f\xb2*\xcfL\x01\xb0\xeb:\x13\xc6\xdd.H%\xf8\xf2\x84p\x15qAQ\xf1\xaa\x0f\xd7k\xa1\\\x9e\x8f\xa0@\x06\\\xf5\xe1\xfa\xfc\x82"\xad\xa3\x89D\xfc\xb9`o\xfc\xedcC\xaec\x91\x105\x19&\x1b\x80\x01\x81\x985w\xe9\xb1c9g\xdfv\xcc\xf0\xce\x82\xf7"Q_\x1fCd\xc0\xaa\x9c\x00\xadj\x8a\x05\x0bWe\x9f*\x84\xb8\x9f\xc4\x8a\xc4DC\x94Q\x88\xf4\x17_\x9d{\xe0\xc8)c\xa9VW\rMhz\x9bH\xe6\xb1\xa3\x87_x~\x1d\x91pZIj\xb1$\x9c\x99\xf3>\xc8-\x88ryb\x13p^at\xd6\xfc\x0f\x94\xd9\nH\xb2\xcc\x12\xb0`ua\x93:7\x8f\xbaV\x04fq\xcd\x84\x00\xfb\x8a\xe1\xe0\xd1S\x7f{y\xa6\x90i\t\xce\x86\x04\x0c/\xa18v\xaa\xf8\x9d\x85\xab5\x87F%\xaa`\x07\xb0\xe1\xff\xb0h\xc9G$B%\x07]\xeb!e\xba\x8e[\xadZ\xbb>\x99\xef\xbd6c\x81"\xe0\xcaC\x00g\x9d\x97I\xfbB\x80\x8c\xb0{\xfb\xcdCQ\xb3}.3P4)^\xb0i\xebnc\x94%@\xa1\xf1\xa3\xb5[6m\xddCz\x84\xaaD\xcd\t\xb2\x01\x81n\x1d=43\xc5\xb5\x81\x9d\x1a\x12\x00\xb5\xb6\x89\xaf\xcdXt\xaa\xc0\xb7H\x8b\x92g\xd9%"\xa2\x92\x91\x9b,\x1dw\xf1\xd2\x8f\xccJRbFl2\x01\xcc\xba\xaa=\xdf\x1d\xde\xb4q;\xc5\xe1\x9b\xcc\xdc\xb4i\xd3\x8a\xa0jJ\xebd\x18z\xfd\xcdw\xf6\x1f8\x96\xdc{\xb5\x9a1\xeb\xd0X\xd6\xfe\xf8[\xaf\xcf\xaa\x95Q~\xda\x04\xe8\x13R\xd4w\xe7\xce_\x9e\xb8\x91\x10\xe6\xcc{7\x12s\x08\xc9\xd8\x83\xa5\xa7\x07\x11k\xd7\xca\x98x\xeb(\x04Oo\x98\x1a\xc3N\x99\xc5\xfe\xfd\xc7\xa6\xbd1\x8f0dX\xbb*\xff)K\xe94k\xd6<\xe0\x19@$p\xe3\xa6/\xbf\xfb\xee0T\xa4\xbe%.\x191\xf8\xec,}\x7f\x8d\'S<\xe9\x13\x90\xc2(\x10N\x9dp\xf5\x90~\xed\x05yZ\x17"FTB\xdb5)\x9a\xe0\x88Q\x0e\xfd\xf5\x1fo\xf9\xc2\xba\xba\x14\x05\x18:\xafZ\x13\x0b\xfcyBJ\x11J\x0f\xcbk\xae\xea"\xd0\x8fi\xfb\x15\x84\x0f\x82\x1d\xe4\xb0\x04\x87Dl\xcd\xe7\xdf\x1c8\x92\xad|f\x8a0E\x94\xcf\x07\x8e\x9e\\\xbbu\x0fI\xdfAG`H\x02\xba\x9e\rc\x08I\xfe\xb0\x01]3S\x84\x14a\x10!Dp\xab\xbd\xe61\xd3W\xf0\xc2\x07\xf8\xeb?fF(\xa4\x8c\xe5!8\x0c\x84\xe6mD\xd6\n\xd7\xa0\x01\xed\xee\x1d?X\xfa\xa0 J\xcc\nU\x0c\xc3\x8bV\xac\xf1\xd8\xa1$gb"\x01\xd00\xa0\x0f?\xfa\x841\x8eU\x00\xe984\xf8\xaa+\xee\x9d2^\x1b:F\xff\xd5B\x91Y\xd8\xb4\x1e\xcd\xfd\xc5\xa2\xa5+\x0f\x1e\xce\x0e J&\x13\xe0\x9c\xed2\xcd\xb5\x85\x186\xa4\x7f\xc8\xb12\x88-\x9c*\x80%#z\x9e?k\xeer\xadt\x93C$Y\xc0\xac9\xcb\xa3\xd1h\xb92\x12\xd6\x03\x87\x10r`\xc85}*w\xfa\x9fe<\xd6+/\x02)u\xe0\xfb\x13\x0b\x97\xac4\xd1I\x90F\xc0X\xd4"\xb2\x14 \x84\xf2\xef\x9b<\xfe\xea\x81W8\x0ei\x05\xdd,#!|\xb8\xfa\xd3\x12<o\xd9V\xc1\xb0N\xe4\x14~\xf1\xf5nF\x96\x81\x8f\xd3i\xdf\xbaY\x83\xdai\x9d\xdb\xb7\x18<\xa0\xbb\x00\x83\x846\xfe\x08\x11\xf8\x18\x89Y\xc6T\xf8\xf9\x17\xdf6\xa9\xd5\x16>\x0f\xe7\xec\x99\xb0\x92\xa6W\xd7\x0e\xfd{_.\r9!\x00\xb8p\x90\x10\x86\xf2\xcdY\xef\x9d\x8e\x16\x9b\xe7\xcb\x82h\xf1\x8c\x99\xef\n\x83\xe1\x8awa6\xa5\xb6J\xa9\xff\x95\x97\xf7\xee\xd6\xb1&\x18d\x05\x82\x020\x0b\x11\xc3\xdf\xff13\xa2\xb4\xa9a0OlR\xfcL\xc4N\xf3\xce\xd85\x03{vn\xdf\xa2~\xed\xb4\xf6m\x9b\x039F\xa9\xd4\x07\xe5\xcb\xed{N\xe6\x14\x81\xa8T\x08\xb3\xda\xb8\xf1+\x9f\x1d\x83=B\xbd\xc4Jv\xed\xdc.$\xf5\xf3\xa6\xdeu\x8b\x84\xa8\xe3h\xb6ca\x1fZ\xac\x98WDb\xe1\x92U\xfb\x0f\x9dd\xb6\xa8\xda\x9a\xe6\x16\xa6\xba0tp\x1fd\x1f-\x1e\x12K=\x13\x00p\xf2t\xf1\x82\xc5\xab@ J|g\xf1\xaaS\xf9\xc5\xe5}\x0f\xc0A\x92\x13\r\x1d|e\x8a[\xa3**\x18D\xf9\xf4\xb6\xda\x7f\xf8\xc4\xfc\x85+L\xc6\x03!*\x1b\xd2`\xab\x99\x82r\x1d\x7f\xea\x94\x9b\x1d@W\x8a\xcb;\xb7\x93\xec \xf9h\xd2\xc4}r>\xdb\xb8\xdd\x06\xf1\xcb\xb6$\x02 l\xf8l\x1b\xc9\x90Mq\x13DR\x89\xce\x97\xb4\xb6\x10\xb5\x8e\xed/\x18\xdc\xbf\x0bS\x94\xb4\xaa\x01\xbeMd\xd1BO?&\xea\xc1\xdf\xff1[iM2\x8e\x01\xaaAC\x8e\x0c\xea\xdf#=\x1c\x8aK..\x0b\x15\xf5\x81\xa7M_\xe6)?\xa6\xfci\xd3\x97\xaa\xa4\xf40\xcb\x82R\xc3\xee\xc0~=4\x13\xaf\xc9H,\xca\x9eX\xb1x\xfe\x1f3\xa3\x16&j\xea[p<{\xd00\xc9\xd8\x80\xbe\x97w\xbc\xe4"\xab\x0ev\xba\xb4\xb5\xf0 \x84v\xd3#b\xca\x86\xcf\xb6%/I\x92\x10\x06\xb1n\xf3&\xa5\xb7\x9cc\xcc\x8d\x94\xa6\x8d\xc2]:\xb5\xd5\x1a?b\x08\xc5#?\xbd+3\x85\x1dv% \n\x0f\xd1\x84\xe2\x8c\x8b\xce\x17\xee\xac%+\xf7\x1e8f\xa8\xa3j\xe6\xf2\x02\x01\xa9Y\x19\xe1\xc9\xe3\xaf\x93\xca\xa7\xc05T\xc6\r*\xf0\xdb\xfd\x07\xa7\xcf}\x7f\xfa\x9c\xf7w\xed?\x94\xa0\xd8\xe8\x1d\xc7\x8c\xca\x9f<\xe1\xbaZ\x99!\x84P\x8dF\xa2\xf7\x93B\xa1\xf6\x1d<6k\xd1*\x85n\x10\x8b\x01\xc9B\x90\xd0\xba\x86$7#\x15\x1f\xfe\xd9\x14W\xdb\x88\x9aw\\\xde\xb1m\xd3\xc6)\x1e\xa5\x187\x9d\x8c!\xad\xdb\xbc\x89\x92\xf2\x82\x12\t\x90\x93W\xb4\xef\xc0A\x8b\x191p\x08l\xdd\xaaI\xd3&\r\xe2q/nyA\x93\xe1C\xfa\x8b\x00\t\\\x82w\xb3\x1cID=^\xb0x\xa5\x01J\xd6\xd8\xdc\x01\x14\x02\xc6\x8e\xb96=\xc5\x91\x98h\xc10#\x0b\xe7\xb9\xbf\xbc\xfe\xc7\xbf\xbcn0\x9d"\xe1\xc7\x02EF\xaa{\xf3\x98\xa1F\xfa\xd68\x15\x0eX\x81X\xb8de\xcc\x16\xa4\xc0\x92\x0f,\x86\x0e\x05\xaba\xd7\xf4\xbd\xf8\xc2&%.\xacfM\x1a\xb4n\xd54\x80\xeb\x9a\x10\xeb\x81C\x87rr\x8b\x12\xfaN\x1c\xd9\x97_\x7f\xeb\x05!\x04e\xb4\x08\xff\x92v-]\x19T\xd7\x01f\x89\xfe\xa3?\x9b\x94\x99j\xd2\n\x93\xcd\x08\x92o\xcdy\xef\xcb\x1d\x07\xc8\xe4\xb9\xd5t\xda\xac\x9a4\xac=\xee\x96k%%\x04`@\x80\x03\xe0\xe6\xe6\xc7\xf2\xf2\xa3\x00\x8e(\xef8B@I\xfe\xf8\xb1\xc3\x9a6\xa8c\xe0d5\xcc\x02\xd2\x1bq\xdb7\xfb\xdf\x9c\xf9\x9e\x8d\xbc\x97\xfdL\xab6\x8aj\xa7\xaa\xc7~v\x87\xa3\xa5B0RG\x8a\xf6m[\x8a\xc0(\xd1\x828\x1a\xd3\xcb\x9b\xd0u\xe2\n\xee\xd8\xb5\x8f\xc15i\x8a\xa6F\x0f\xf8\xcd\x9b6,\xc1\xac\xeaM\x89T\xbfN\xc6\xd8\xd1C\x04\xa8\x04\xd5B\x9f\x05!\xb2s"s\x16\xaeP\x8c\xe7\x00g+\xd7\x9b\xe6j\x8e\x045\xee\x96\x11!Ie\x8d[\xb6z\xa9\xfe\x86\x0b"\x04\x98\xe4`&Jqy\xdcm#$(\x89.\xd60\x15\x8eI1\xce_\xfc\xe1\xf1\x9cb\xdb{\xd9O\x85@G\xf0\xd8\xd1C\x1a\x9c\x97!\x91J"\xcf\x02\xb9y\xd3\x06\x08\xca #\xc8ho\xce\x8eo\xf7\'t\x9e8\xb2={\x0f\t\x19*\x01+1\xfb-Z4+\xcd\x8a5\x8eX\t\xb1\xbb&\xdd\x98\x16\x962\x91\xcb\x10\xa0R\x10^\xba|]q\xc4\xafq\x81\x0ba<\x13~\x93F\xb5\x87]\xdd/\t\x1e\xca\xa5\x00\xdc\xa4EA\xe4\xa1W\xf7i\xd2(\xcbl\xc0\x9az\xdf\x90\xb1\xa8\xd8_\xb4t\x8d\x01\xaa\xfa\x89as\xe6\xb0\x0bS&\x8d\x91\xda^+YR-\x9e[\xb4h\x16\x8f\t\xdb\xda`\xce\xee=\x07\x93\'Y\xce\xcb\xb6\xe7P\xae\xc9\xed2\x94E\x94L\x8d\x1b\x9e\x17$\x83\x05\xc0&\t\xec6\xac\x9f5\xa0OW\xc1>\x93q^X\xd4\x14;\xccL\xc2;v*w\xe1\xd2\x15\x14O\xe4\xe6\xa0\xffj!\xab\x02\xaf\x14\x82\x03\x8a\xa7\x8c\xbf\x1e \xca,\x89\x84\xb5\xc5\x90K\xcez\xd9\xda@\xccZ\x07\x93\x82cS\xc6\x8d\x02\xdf\x86\x00\xab\n\x16.\xd3T\x80\x8c\tr\x9dx\xf1\xb2\x95\xc7O\xe5\x92\xf4\r\xa8\xd71\x1eU\xa5\xb9\x8f"\x87\xfd\xab\xfawoP/\x0b\xc8\x05p\xe2\x1a\x9b\x1e_\x93\x86u\x1d\xa5\x8c\x80\xb4\xf0\x00\xb9\xf7P\x9e\x05\xdc\x94\xcc1\xd8\xa4%j\xf2\xc1\xc3G\x0c\xab\xb7EB\xc0u\xb0^\xdd\xba%xy\xc3\x89%\x80D\xe0\x1bo\x18\x18v)\xa8g\xc5\xa6\xd2B\x80\xe2R\x0c\xf2\x85\x97gF\xfc\xe0Gq\x88\xde\xb9\xa0V\xb4Q\x8cn\xfb\xb6\x17\xf4\xea\xde\x81U\xccX#g\xe9\xc7\x8e\xc0\xeb\xd5\xa3\xc3\xa5m/@t\x98\xcf\x05\xb0T\x06S\xa8\xff)\xf6\xf9\xef\xaf\xccbtP\x90\x89\xc6\xd8,\x0fbc\x86\x86\x1d\xbe\xf1\xba\x81Bs\x7fi\xd2\x13K\xf1\x88\xf5\xce;\xcfu1\x0e\x14\xd4\xbf8\xf4\xfd\xd1\x84g\x95\xe3\x12JQNn.\x96I\xbd\xcc\xcc\xccHM\xb5y\xe5h\t@\x81\xe4W}{]6\xb0o\x0f\x13\xa0\xb7\x9e\t0\xaa\x91\xc5\x94\xc8}\x07\xb3\x17.^i\xf6\xa6I}D\xac\xbeg\xc2\x0e\\\x18\tDwN\x18\xed\xa2\x07\x14\x9c\xe8\x8a\xc8`1\xe4JRd\xd2\xb8Qh\xb1-(\xce\x01\xb5G`\xad8\xb6\x06\xf5\x82%\xab\xf6\x1e8\x0e \x05i\x9bX\x1fC\xcd\xd2mB\x12\x0f\xec\xd7\xa3o\xef\xcbl!5\x13\x11\xa3\xb8\xb1\x02\xa9i\xe1\xcc\xcc\xc0\xa5h\xc0\x1f"\'\'\'A4\x96\xa9V\xc7\\XXX\\\\T\xe2\xfag\xe6\xba\xf5\xb20\xa8N\x85F\xff"\x9b\xc8"P\xa4\x84\xe4\xa4q7 \x15\x99\x88<\xaa\xe0})\x91\xb5\x9a\xecd\xfc\xf1o3\xb2O\x15\x90\x05w\xe9O\xcfQ$\x08!\x1c\x07\xaf\xba\xf2\xf2\x1e\x97\xb5\x12\xec\x99\x84|\xe2\xf2N`\x93\nF\xc4 \xc8\xeb\xd5\xa5\xed\xc0>\x97K\t\xf2\\#_\xf1T/\xcd_\xb3s\xf2\x9f\xfb\xeb\x0ct\xd2MF\x13\x19y\xce\x14h\xc9\x8c\\4i\xfc\r)!!\x02\xad\xc0N6\x00\x93"B\xdd\xbaY%\x803"*...,,\xac\x98\x00\x00PTT\xac\xac\xa3\'~\x02\xce;\xafv\xb9T\x11\xb0\xae7`\x90\x0cxy\xa7\xb6\x9d.\xb9\x08\xd1#\x0b9@\xcb\x03\x14\xa3R\x88G\xb2\xf3\xde\x9e\xb7\xdc\xda\x04\xc8\x9c$\xb1+m\xaa\xec6\x0f\t5\xf1\xf6\xd1&\x13\xb1\xc41Wn\xd18(\xdeD\x13n\x1b\x15*W\n\xaa\xda\xe2\xc7\xa4\xaaZ\xcf\xbc\x9c9o\xf9\xd1\xec\\#\xc6\x83y)s.4\r\xd8\xebt\xe9E\x97ujkF\xe3X\x9c\xa5(\xc9h3\xbe\x18\xb3\x80P\xc2\xe4\x95REE\xc5e\x9f\xe5\xb0\xf1\x9a\xd8\t\x14\x16G0H6\xd3\x03\x10\x08u\xb3\xb2\xac\xd1\x13Or\x94\x80\xa5!\xa5\x90#\x1e{\xf8\xee[\xef|\x8cT\xa6V\x0f\xd0ctm\x11\x08F\xf6\xc1\xf9\xcb\xcb\xb3\xc6\x8c\xbc\xbaQ\xbd4D\x0f8TMn\\\xf6\xcb\xda\x10\x1b:\xf0\x8a\xa9\x93n\\\xbf\xf1K2\x01\xea\xf24\xb0.;\xbe\xb2{\x87\xa1\x83\xae\x00S\x8f\xf1\x0c]U\xe1\xc1Z\xad\xf0\x80\xf1\xf8\xc9\x82?\xbf4K\xa1\x1bx\xa2\xd8\x006\xc0\xd3\\\x17\x1d\x07#\xbfxxjH\x8a\x12\x0f\x94YeC\t\x0e\x12b\xebde\xa1\xad\x8bj\xedX\xc0\x82\xe2H\x03[\xd1Q\xf3\x16\xcd\xbeK\x83^\x11\xcf\x8f\x0f7\xe83-%\x8cXv\x06\xa2,\xdc\x11\x99zu\xeb\xd0\xb3\xeb\xa5k7\xee\xd3\xa7\x1f\xadf\x12\x9f9\xca\xa2b\xf5\xf2ks\x1f\x7fh\x82<\x17\xbfDB9UOH~\xf4\xc1[\r.\xaa"\xc5\x92\x03\x8b\x14\xb0\x18\xb0l\x9e\xf0\xb9!\xb7I\x81\xf3\xe2+\xb3\n\x8b\x148n<\x81\xd0\xeeT\x93\xe8\xa9\xb8{\xb7K\xbaw\xb9\x14\x82\x8a\x0c%\x08vY\x92T\x83\x88\xe9\xa9)%\xb1rC\x03\x8cz^\x80\xbe\x04(W3\xd6\x94]K\x0c\xea\xba\x8e\xe4\xb3f\x19\x08\xa6\x9f\xdc7\xce@\x16\x80\xca\x9b\xa3\x06\xb8 \xdf\x9e\xb98\xfbT\xa1^\xb5\xa4xt\xb5\x1a\xb2\x0b\xe4\x08\x16\xda\x02\x06r\x99\\\x862\x7f\xe4\x82r\xf4|\x04\x92k4\xc2so\xda\x88\x04q\xfcT\xe1\xec\xb9\xef\x82\x16\xba\xe5G\xceZ\xb6H\x8e\xfc\xf4\xfe\t\x86\xf5\x9eq\xc8z\x01\xddD\xe7\x8f\xef+mX\xc7\x7fV\x1as\x17\x01P\x13K\xe0\x08\x1c\xaf-v\xc6\x1d\xa4\x05;\xf5\xec\xda\xaeg\x97\xd6\x12\xfd\x92a\xc6\xa3\xa3\xfa\x1b\x051\xe7\xc5i\x0bTr\x85\x98j6\xd2\xaa1+2(\x1ft\x8c\x82/\xcb\xfc9\x80.\xa0$\xb6Fg\xcd|\x0f\xcc\x8a\x9d\x97\xa6-\xc8/.\xa7\xc5\xc6\x81\xf3 8vE\xd76\xbd\xba\xb4u\x04\x9d\xd9\xd1TF\xdd/C%S\xaa\xad4?\xde\x89\x7f\xc1\x06u\x12\x17\xda\x0fV\xf5\x8c\xf31G\xce\xff\xc9}\x13\xc7N|H\xba\xe9\xe5?\xb4y\x8a\xa17g-\xbdk\xd2\xc8F\xb53kb\x1a3z\x88\xa2(\x129~$\x8f\xe3\x0e\xb2\x84\xb1 s\x83zY\xa9)\xd2L\xaf\x06$gq"\'\xff\xcdYK}\x0e\xa1\x8cay \x85\xd6x\xbc\xe8\x8f\xef\x9b M\xae\x1f\x9cU\xc4\xf8~\xe2\xb9\xc7\xf8N\xb7/\xcb@qM\xad\x18\x0e\x8a\x12\x06)%1_\x05\xea5T\xf0\xa0@\xd83u\xbf\xbcM\xcfn\x1d6l\xd9\xcd6;4P\x84%ic\x11\xf3\x8b\xd5\xb4\xd7\xe7>\xfa\xe3I%\x19*&\x8cq\x96\xbdS\xa6\xfbR\xc7\xa3{:_\x8d\x1d\xf7\xd0\xce\xef\x8e\x99\xfao\xcaf\xff\xc4g"L\xa9\x03\xd5\xf6\xe2F3\xdfx.3]\x9e\xa9\x9f3?+.8\x8ds\xf7\xd5is\xf3\x8b\x15I\x07\x03\xdb\xd3\xd8\xdb\x81AI=\xbbw\xe8\xde\xa5-\xb2gj\n\x9di\xe8\xfa\x03\xcfWe\x07a\x16Y@\x89\xa5`\xc8!\x02\x14>`Z8lP\xa1\x10\x87\xb9a^A\x811\xfa\x91+2\xe79\xc0\x92h\xc2=\xf1\xc8\x94\x10\xc6L\xd8\x0e\xad\xde\x89\xec\x98\x14\xec\x98B1\xed\x8d\x85\x87\x8f\x9d\xe48~?^g\xeb\xec\xad\xec\x03u\x873g/\xfa\xea\xdb\xc3\x11\x94\x9e`\x1f\xa5/\\_\xb8\x1e:\xe6OD\x05\x14\xa3\xf3\xe5\xceCo\xcd\\\x94d\xa9U\x96Wc \xf7l!\t\x00\x87\x8e\x9e\x9c\xf1\xf6\x12S.\xcb3\xba\x95\x13\xefPJ\xe24\xe1?\xfe\xd0d\x83\x16tX\xc8\n\xb18\x1cOm\xc8\xcb\xcf\x0f\x00<f\xcd\x05CZ8$\xe2Pb,\xab\xab!BZZ\x9a\x11\x01\xa5\t=99yP\xa6>j\xf2>\n\xa2=\xac.m{\xd1\xa0~\xdd\x8d\x0f\xc3A\xb0b\x8a$\xb3f\x92,\n\xa2\xb8\xf8\xdd5\xd6NAST;\xd9\x95\x9d\xd4D\x99\xac.(\x8c\xd2\xdbs\x97\xb2\tsW\xb8\x9d\xad\xc1\x0c\xc2y{\xce\xd2\xa2(\x97Yw\xac4\x1e\xa0,\xe4:\x1eK^\xb2|M^\x11Y\xd3W2;z"\xa6\xb6\xa8\xb6~y`\xbfn\x1d\xda]\x84\xe8\x9b\x80U2m\xcb\xad\x92^\xc0\x92\xb5bF\x81\xe9\xe9\xe9\t\x93\x0c\x1a\x11\xa7\xa7\xa5\xbbn\xa8\x04\x83\x85\x88\xc7\xb2s\x88K|j\xc9\xc2\xcd\xbe\x14R\x88\x90\x84\xc7\x1f\xbd\'5\xec3\xfbd\xe1gD&m\x9b\x84\x1ehx\xc6\xac\xa5\xbb\xf7\x1d&=CU\x1dt\x141\xb3\xef\xd3\xbc\xc5\xab\xf6\x1c:I\xc2\x9au\x15}Q\x8f\x99\x15\xca\xef\x0e\x9f\x9a\xbb\xf8C\xdf\xa7 g\xa3\n->\x18&\x16{\xf6\x7f?}\xe62\xc0\x14\xb3K\xc9\xf8#\x94V\x11\t\x10Uj\xc8{\xfc\xd1{\\\xc9\xd2\xfa\x03!\x19g\x14\xc0\x81\xec\xaa\x1d?v\xca\xae\xa4\xcdi\x92\xd2IKK+[\xce\xa0\xec\t\xc0p\xd8\xcd\xc8H/\xeb\xe5\xcf\xc9\xcd\xf3\x14\x95\x06c\x13\xa3",\x023[\xcb\x92fM\xea_\x7fm?!\x0c\xf8\xc9\xd6m\xd6\'\x8c\x98=D<p\xe8\xf8\xbcE\x1fh\x13\x86Ma\x9e*\x11 \xb8%\x83\t\xa7\xbd\xf1\x8e\x8f.\x83\xc0\x8ayz\x90E\xcd\x80J\xb8\xaf\xbf9\x8f\x94\x81)\xb0\xaa\nbU\x04.,dp\xe6,x\xef\xc0\xe1cB+*1\x13n\x11\xe6\x0fQ"\x80?r\xc4UM\x1a\xd7\xe78\x8cL\x04\xa6o\xd9V\x9a\xde\xe2y\x94\x9b\x9bW\xb2\xbc\xc4\x9c\x91\x9e\x1e\x0e\x87\xca\x16LK\xbc;\xe2\xfc\x06\xf5\xec\xd7\xad2Z\x1c\xf1N\x99Ct&c&.\xb0\x8d\xe7\x83\xf8\xfe\xbbnwD,8\x006`\x8d \xb4\x19\xe6\xa3p\xe7/\xf9(\xaa0\x1e\xb2\xafJ\xb3\xfb\x8b\xd6}\xf2\xc5\xae=\x87\x19\x1d\xebb\tT\x0f6p|S1\xdd\xec\x10a\x01\x0c\x8cb\xd7\xeeC\xeb7|\xc1@g\xc6\xb2\'\x10\x00\xb5\xbeF\xec\xf9\xb8h\xd9Z\xd4\xa6\xaf\x12\x12m\xb5KB\xad\xb73\x91+\xbd{&\x8f\x15\x81\xb1\xe9`\xbc\xb6H\x85\xcb\xc2\x009y\xa7\x0b\x8bc\xd6Ul\xaf\xbbi\xd4\xb0\x1e\x94Q\xf4\xcb\x12 \xc8\xac\xbe\xf0\xfcz\x12\x05Q\x10\xc6d\x14\xd9\xd9\'K0&I\xe0\x0e\x83\xd8\x14\xa5Om~~\xc3\xbe\xbd:I2~y\xe1\x1b\xff\x90)\xc3)\xf4\x84\xf6\x1f\xcdY\xfe\xc1:\xb3\x8eUZ~\x8b\x89W@\xaf\xbe\xb9\x08D\x8a\xc1\xbf\x04\x15U\x8c\x07\x05\xe2\x04(\xcd[\xb1\xc1i\xc0\xb4W\xdfXD`a#U\xa0\xb5^\x9e\x18\x08Z\xfe\xfe\xda\x03\x87O\x91\x15\xadz\xfb8\xc6\x8dK\xa8m@\xe8\xd3\xabS\x8b\xc6\xe7#\xd9\x14\x1d\x0c\xfcm\x15%0\xdb\xe5:z<[\xebQ\x86\x00\xe6\xba\x1b\xba\xb0Y]Qn\x19\x93\xeaT\\xACf\xbf\x84?\x08\xe1\x1c<x\xb4\x8a\xfc\x1aQ\x0b\xdeQ\xd7\rv\x85-\x1aQN\x137\t\n\xe2\x85\x97\xdf\x8a*[X\xad*\x0e2\x02pw\xed9\xf2\xd1\xfa\xcf\x13\n\n\x90\x01\x0c\x11\x87\x89\xc3\x86\xce\t9{\xb0f\xfd\xe7;\xf7|\xcf\xe0V%4m\x06#c\xcay\xe1\xd5YJ[s\t\x87F\x02\xb3\x8b\xb1\x91\xd7\r\xd4\x8f\x92U\xdc>x\xe0\xd0Q\x14\xf1\xa2a\x9a\x87q\x8bf\xf5\x13\xbe\x94H\x80\x8b/na}\xee6pC \xf7\x1e8\xc4Us\xa7hsZ\xe25W\xf5\xee\xdb\xbb\xb3>\xd1\t\x10~\x04\x89\xce\xf6\x9d\xfbV\xac\xde\xa0\x80\x95\xaa\x049jj\x13)\x8f\xf1\xad\x99\x8b\t\\,\x03\x94\x0f\x82\xc2he\rs\xf9\x90\x98=\xed1\x12o\xcd\\\xe23*RD\x95\x10\x9b\x94\xafX\xbc\xbfz\xe3W;\xf6SR%Js\x88\xfc\xfeW\\v\xcdUWH\x89U\xc3\xd8i1\xb7\xff\xe0\xf7,\x1c\x8a{\xaaYymZ^\x90\xf0\xbdD\x02\\\xd6\xb1-R\xccz\xd5\x8c2/w}\xbb\x9fl!\xbb\xca\xf8)\x9a2\xef\xe9a\x9cx\xeb\x08I\x11(?m\xb4\x97b\xc8\xf4g\x7f\xffJ~a\x0c\xb1\x92\xd2\x03\xa6\xa8\x93\xd8w\xe8\xc4\x9c\x85\x1fV\xb0\xc7\x15:*\xd6\xa1M\x83K\xdb4\x90*\n\xe5\x91Y\xda\x00\x14r\xf6\x82U\xfb\x0f\x9f@=\xacJ\x9e\xc5\xc2\xcd+\xf2\x9e\xfd\xc34\x85\x19\xd2\x94\x8b*\xff9!D\'\xdc2"#\\r\xcd\xc9\xd9:\xc3@\x11\xc2\x9d\xbb\xf6\xf9\xf1dd\xcd\xac)\xd6\xb9C\xdb\xa4i\x96o\xcd\x9a4\xa8U+#p-\xea\xae\xc4\xae\xdd\xfbsr\xf3\xab\x881\xb1\xaaR\xcfn\x1d.\xbe\xa8\xb1\x00\xc6\x84\x12\xd7B\xdb9\xfb\x0e\x1d_\xbc\xf4CN\x82(%\xf5\xa5\x98q\xf6\xbcw\x8bb\x94\x90\xf1\x8f\x80\x12\xa4\x83\xfe\x93\x8f\xdd\xf3\xe4\xa3\xf7\xb8\xe8\x0b\x16e\xce\xa8y\xac\xc0\xc2\xa8?k\xee2{\x87\xc4\xd9\x1fE\x80\x8b\x97\xad\xde{\xe0\x889P\x1c\x17\xa2V\xb6\xebs\xd6\xf2\xa2\xc6=\xbbw0H\xcc\xaaj\xcf\xa7\xf2\nv\xed\xd9\x8f,1\x10\xd5\x9c\x95\x99\xd1\xbci\xc3\x84\xef%\x12 -\x05\xbbu\xee\x00\xa8X\x90\xc3"\xe4\xc3\xce=\x87\xb7n\xdf\t\xecs\xc5^\xe0r\rI\x009)\xae|\xf8\'wJ\xf2-\xaa\x9bY\xab\xd1LR\x81PR(\x19\xfe\xfds\xaf\xe4\x15F\xe2\x86\xb1e\xb9\xc9\xe5j\xa2y\xf9\x91W\xdf\\\xecKSN\x8cE\\\xf3\xd1\x16*2\xf4\xeb\xdd\xad\xd7\xe5\xedzui\xdb\xb7WW\xb4\na<\x16\x85\xe00Jr\xe5\xabo-\xca\xcd+f\x8e&/P\xdc\xf4\xd5\x12)\xeft\xf1\x1f\xff\xf4\x1a\tWI\x8f\xd0\x1a\\\xca\x1c$\x14\x8a\\R\x8f\xfc\xe4\xce\xd4\xb04&q%+\xc0\xc1\xfd\x08\xde\xd6\xed;v\xed9\x9c\x02B\x1a\x98-\x01u\xbd\xacS8\t\xa2\x97\x9c\xa0\x81\xdd\xbav4\xb5\xe5\x83\x08\xbbG\xb4m\xfb.\xeb\xdb\xaa\xd4\x9f\xc2F\x1d\x17\x82\x06\xf5\xeb\xda\xa9\xfd\x05\x86\x1d;\x00\x8e`t\xb4I\t\xd2\x18\xc6\'O{\xd3g.\x8b[\x9ed\x80\x96I\xd0\x1et?\\\xf3Y$\xea\x05Fny\xabSB\xd1\x1d\x13GY\x19p\xc7\xa4\xd1\x82\x0b\xcb/\x82\xb2%\x96\x8a\x8b\xbdUk6@b\xca\x98~\x1cc\xf0t\x04\x981k\xd9\x89\xdc\x98\xf14\x80c@\xe7f\xd3\xba\x80\x0e\x03wh\xdb|P\xbf\xae\x08\x16\xdfP\x85\xc8\x86)\xa5\xb2m\xfb\xb7\x9e\x8a\xfb\xc6\xf4{~\xd7.\xed\x93\x01\xcb\xc9\xf9\x01\xd8\xabG\x07\xf4c@h\x8b\x103:[\xbf\xdc\xa5\xb8\xf2J\\\x1c\x04K\xf58C\x92\xef\xbf\xfbv[\xcf\xc8p\x1ba6\xaf\xb6-\xcd\xa9\x08\xbd:c\xc1\xe9\x82b\xa2@\x87O\xe6\x111_,_\xb1\x96H\x94\xb7\xc1\xad\xe1\xa1\xda\xb5j\xda\xabGGS\xca\x9czw\xef\xd8\xbeu3S\xab7P\x16\x8c\x91\xaa\xf7/\xb1|\x7f\xe5\xfaXR\xee\x9a\xad\nk\xb0\x97\x90_X\xfc\xea\x1b\x0b}\xb6\xd9\xced\xeemb\x83\xa95^U\xf6~t\xcf\xb8\x90\xe4\xa0\xdee\xa5\xabo\xc7\xa7p\xdbW\xdf\x12:\x84JOW\x9b\xff\xd1^=;&s\xb0d\x02\xc8vm/\xae[\'\x03Y\x92\xde\x98\xfaHn\xd9\xf6\xad\xe7S\\\xf5=c\x0b\x82nz\xfaZY\x18\xd8\xaf{\xc7v\xcd\x10<\x8b\n3Ac\x93U`\xaa\xa6\x9e\xcc)\x9a1k\xb1\xc7\xd2\x96\xe3M\xd6\xd5?\xfb\xfc\xeb\xd5k7\x83t\x99P\x04\xca\xbf\xd1\xa1\xf5\x8b\xe8\x84\xdb\xaf\x93l9\xb2\x90@\xe3o\x1fA\x10aVF\x04j\xba\x08\x0b\\\x96)\xab\xd6n\xda\xf0\xf9\xd7\xc9\xd3\xb6hV\x9fp\xc6\xcc%\'s\nMmD\xb3\x15\xd0\xd6\\\x10\x8aH\xa2\xea\xd0\xae\xe9\xc0\x01\xddM0Q\x1au\xa8\x82\\\xdf\x84\xe5g\xadT\xc1\xe6\xad;YH\x9f=\x13?\x10\xf5\xce\xcbh\xdf\xb6%&\xe5\x89$\x83;\xc9q\xc4\x15\xbd\xbbY\xcb\xcd\xa6\x7f\x9e8\x99\xb7u\xeb7\x16auV\x02\xd8\x84\x01\xdd-\x018\x12\xa6N\xb9\x15(\xa6Gmfeb\xb9d\xacb\xad\xe2\xbe\xf2\xfa\xec\xc2b\xdfz&\x92%\xf2{\xef\xaf)\x8e\x1a\xf3%\x08\x91\x0b\xcd\x9aI0\xab\xda\xb53F\x0c\x1b\xe0\x08\x03\xf5@!\x05\\7\xec\xaa\xac\xac4-i\xec\xd7L\x9f`\xdcQ\x91(-\x7f\x7fuB\xe7\xd2\x06~\x19\xf3\x8b\xbcW\xa6\xcf\xd6rE/\xadI\xb6\x06a\xf7\n\n \x8e\xde{\xf7m\xae\xa9\xcef\x13\x08\xb12)l\xb14[\xb6~s2\xe7\xb4\x8d\xfb\x9aL\x1e\xea\xdd\xb3\xab\xe3TP\xa78i\xe7\t\x92\x10\x19:\xa0\xbb\x0bQ\xc5\x92 \x8c\xc8*\x14\x9e\xbbl\r)\x05I\xf9\x05I\xbdIS\xc6\x01\x85^\x7f\x18:\xf0\x8aK[7\x95*\xa6e\x1eFQ(\x04W\xa0\xd4\xab\xe4\xb8\x87r"o\xcc]J\x01\xbd\xd0\x0b\xee\x06Q\x8ab\x05Q\x7f\xc9\x87\x9b}\xe1\nP\x12\x814\x0fS\x80Q\x12$\xbd\xd0\xf0~=3S\xc2\x062d\x81\xe223\xec\xde\xd0\xaf\xb7\xe3\x85Lq\xb3\xa86\x91%\x1a\x80L\xcc\x17\xee\xb2\x0f\xb7\x14D\x94\xefGm\x92\x9eg\x955\xe1\x13\xd0[\xf3\xde=t*J\x8e\xa3-wmb\xb9Z\xecbT\xdb4\x14\xeb\xd8\xa6\xf9\xb5\x03\xae4\nV\t\xc04\t\x89\x9d\xd0\xf4\xf8i\xde\xd2\x8fX\x84P\x933E\x81\x10\x1c\x192\xb0\xa7\x04/Y\x80T\x90\',@\x0e\xe8\xdf\xbba\xfdt\xd4\xa2,\xc0Z-]\xf6\xe1\x89\x9cB\xa8Ly/\xdfH\x02?\xf1\xe8}\xae\xf0\xccFH\x0cQILy\xe9\xe5\xb7O\xe4\x16\x98\xcd\x15\x98S\xc6\'\xe6\xcc[\xf0Av\xf6\xc9r\xf32\xd4\x15Lu\xea\x84F\x8f\x1e\x92 \x0b\x11a\xf4\xe8!u\xea\x84\x0c8L&`\x90\x8eg\x9f\x9c\xbf\xe8}\x10n<\xb2\xce\xd6\xf4=\x91[\xf4\xc2Ko\tLRMX"\x93\x8b\xb1\xc7\x1e\xb9\xc7\x94\x15\xafN4\x1bevN\xc1\xd2e\xabL\xf92\xe3vdjX?s@\xbf\xde\x15b\x84\x93\xdf\x12\x082=E\x0e\x1c\xd0\xd51\x000\xcb\xd6\x0b\x8bc\x8b\xde]M\xa6\xe2u\xd5\xf3\xad$r\xcf.\xed\xaf\xe8~\x89\xb9%,\xf1\xec"\xcb\xdc\xbc\xc8\xf2\x95\xeb|\xcdaT\xe0\xff@\x19\xf5\xe9\x8dYK\x00\x9d\x12G\xae]\x15\x04\tL\xfd\xfbv\xeap\xe9\xc5\xc951;\\zq\xff\xbe\x1d\x8dkH\x96\x8al\xdb\x03:3f.\x89\xfa\x01|A\x18\xdf\x8c\xc7\xf0\xde\xaa\xf5\xa7\xf3c\x15d\xd7j+\xd1\xbf\xa2\xfb%=\xba\\"DU\xc14ve\x14\xe0\xa2\xe5\x1f\x15\x14\xc5\x10\x82\n\xaa\xae\x80\xc1\x03\xbae\xa48\x02+\x80\xc9W\xf0l+\xd6&\x8e\xbfAyE6J\x8c\x84\x8aC/\xbc6\xaf(\xeaU\x83\x00\xe6\xf6\xa2\x90\xc3O<rw\x88\x8bJ\x9c?\xa5U\xe1H\x11\xb8\xd3\xde\\|\xf8X\x0e\x19\xd8\xad\xd5e\xdf_\xb5\xee\xcb\x1d\x87\x12N\x8c\x96\x1cL\x92\xbc1#\x07;Iw\x90\xa1\t\x03\x8d\x19y\xb5d\x9f\xc8\xc7\xf2\xda\n\x81\xdc\xbe\xeb\xf0\xf2\x95k\xad\x1dc\xdc\xd6\xe2\xc8\xf1\xd3\xaf\xbd\xb1\x88\xc0\x15eT\xb0\xb8\'\x83\x90\x0b\x9f|dj\x8a\x13\x87\xbbU\xa1\xd9\xfc\xec\xc2\x88\xf7\xfcks\x14\x84l\xa5MM>/z\xe7\xf8\x91\x0e\xfah0\x1b\t\xbfJ\x12\xc2v:\xe0_tA\xd3n];\x99\x0c@\x0b\xc2\x93G\xb2s\x96.\xfd\xc0f\x82We@&\xabQ \xabv\xad.\xb8zP\xdf\xe4,}\xe3#\x91\xbbv\xef_\xf6\xee\x87fw\x07\xef\xbf>\xe3-\x10\xe1\x84i\x9b[6\xa8i\xd3\xf3\xbb\\\xdeA\x9be\x89\t3 \x05v\xb9\xbcC\x93&\x8d\x84`J\xa8q\x89\x8204\xfd\xcd\xb7KF\xc6$\x96.[\xb5k\xf7!sF\x12\xa7\xc3@\xd7\\\xdd\xbfm\xab\x16\xa6\xac\x99\xa8\x16\xach\xc9\xb2\x0f\x8e\x1e\xcf\xb5w|[k\xba[\xd7N\x17]\xd0\x14YU\xb8m+\xd0\x8aL\xa8\'\xe4\xa0;\xf1\xc6\xc1,N\xfb\xda*\xf3A\x16\x83\x93\xfa\xfc\xf4\xa5\x85\x8a\x88\xa3&NUI\xbc\t\x03\xe3I"\xa9\x1f\xdd3\xde\xf1c\xc2g\xa3\xac\x1b\x85H\x9b9\x82\xb4\xd2\x985\x7f\xd1GZe\xf7Y\x11}\xfa\xc5\xaeM[\x0f\x1b\x85\xb0\xfc"r\x86\x80\xa2I\xb7_\x95\xe6\x8a\x00\x9eW\xeeY,\x01\xd3\\1\xe9\xf6\xab\x04\x14\xa3*\x1f\xf6c\xdd\xfd\xe6/\x0e\x7f\xba\xed[=|\x9f\x19\xfd\x05\x8b?T"\xcd3\xc1Q\xe1K$=86\x85\xd2\xc2\xe4\xdf?\xe5vs\xad[R\xb8%\xa91\xf8l \xb9\x8a\xa2E\xcc\x7f\x9f\xbeH\xb9\xe1X\xa8\xc8C\x9f\x08\x1c8}\xdb\x98\x01\x9a\x18\xe8"VPP\xa6\x82Dm\xd3\x88\x99\x06\r\xea{~\xfdzB\xab\xe1\xd2\xde\xf1\xbb\xfb\xdb\x83\xef\xbe\xb7\x16\xa4c\xeb\xc7\x9d]\x1f(\x89\x91\xa0\x806-\x9bv\xb9\xac\x1d[m\xda\\S!\x02\x80-\x13\xc17;\xbe\xfb\xe4\xb3\xafI[\x0c0}\xfa\\\xc6P2[\x16\xe4\xd5\xcaH\x19=\xf2z\xac\xf0\x96\x10\x0c\xa05\xa3G]_+#\x15\xb8\x9c\xabU/\x8f\x14\x0c\xee\xf4\xd7\xe7\x185\xde[\xb7q\xfb\xf6\x1d\xdf\xb1\tk\x19\xb3\x84L\xcdk\x03Q \xee\xd2\xa9]\xfb6\xcd,\xa0\x9b\x93Onb3`N\xa1@\xca\xe5\xef}\xfc\xdd\xb7\x87$Y\xa4\xbe\x9e|\xc3\x86u\x07\x0f\xeeK%\x16j\xd2\x8f+^A\x13\xda\xa0\xf4\x149\xe5\xf61\x0e{\xc8q\x0c\x1d\xa6\xfe\xe5\xf9\xb7\x8ab\x82\x8c\xab\xa4R\xab\x9cl\xb5\n&W\xd0M#\x07\n\xf4 \xb8\'\x04\x1cS\xe9,\xb8\xa0S\xa6\xff\xf1\xaf3\x95\x10\x07\x8fd\xbf\xbfj\x03q\n%1^\x89\xb117\x0c\xa9\x9d\x99\xc2\x15E\xb9J\xde\xac\x9d\x912\xe6\x86k\xdc\xf2wd!\x9al\nN]\xb1z\xe3\x81#\xc7}\xc4\xff}~\x16\xcb\x0c\x1bfD\x0b\xbc5E \x10\x85\xcb\xb1\x9bn\xb8\xca\xd1\x1c\xcf\x0c\xbe\x92)\xda\x9f\x93\x02\xbf(\x86\x7fy\xfem\xc44G\xab\xb0\x8e\xd6\x81\xd9\x9f4~LZH\x08LJr;\x0b\x01l\xf2\x15\xa2\x90\x88\xb7\x8e\x19V\'\xdd\xb5\x17\xfcY\xc4\xc9\xde\xfd\xd9\xb3\xe7}\xa0\xc8\xa9B\xa8/\xd8=&\xc3U]3\xb8O\xd7\xcbZ\x91\x8a\x99\xcd\xa8w%[&\x85\xa4@~\xba\xe5\xeb5\x1b\xbe\x9a\xf6\xd6"\xe3\xfb\x11\xa2\xcc"[\xc1\xe8\xa27q\xdc(d{!^"\xe9\x83\x1a\x06\xa6\xd4\xce\xc4q\xa3\x1c\xf4\x92F\xa2\xbb-\x8a\xd2\xebo-\xfe\xf8\xb3\xaf7n\xd9a\n\x9d\xa0\x89j\xc6k\'\nD\xf6\xbatnu\xcd\xe0+\x8d)fU\xa6\n\x119\xe5\x9f\xad\xed\x0b1{\xfe\xfb\xdf\xed\xcf&6\x1eIS\xc1(+]\x8e\x1d=\xc4\x11Ve\xa8x\xbbV\\74\xa0\x01a\xad49v\xcc\xd0\xb8\xaf\x0cIF}p\xff\xf8\xe7\xb7\xbf\xdbw\xd4\xf8I\xce.\x03\x02\xd5\x1e\x8db\x9eU+\xf5\x8eq\xd7\t\x8c\x11S\xe0\x033{\xc7`\xbe\x159\xce\x1d\xf7\xfc\xee\x1f\xd3\x97\x92\xa6\x96\'9\x91\xcb\xdc|\xe3\xb0f\x8d\xea\x8a\xcaJ\x12\t\xf6\x9b5\xaa{\xf3\x98k\xcb\x8f\x04\xa5\xa91AB\xbc2c\xd9\xa4\xbb\x7f\xcb`\xb3\xa0=e"k\xc1\xad\xf4z\xde\xd1\x89\x13\xae\xcf\xcaJ\xb37\xaf`\x15\xa2 v\x87|\xb7\xef\xe8\x1f\xff\xf4\xa6\x02\x87\xa4q\xdahS0v\xdbMCk\xa7:\xc8\x0e\xb2\x0c8UUJ\x96\x95\x14\xe06\x8cU\x8c\x1a=\xb8E\xb3\xdaH\x0e\x92\xb9XZBna\xf4\xb7\xcf\xbd\xe6QP(\x94K\xb3y(\xa9s\xdb\x8d5\x8c\xb1\xff\x15\xdd\x9b6\xaa#\x89\x80\x1cs\xdeA\xbf\x8f\xf6\x1ax\xe1#\xb1\xb6\x95\x84\xe1\xc8F\xeba6q5L\x15\xc5\xe3o\x19\xee\x18\x0e\x11\x1f!\x96\x7fR\x00\xe2F\xe1:\x02\xc7\x8f\x1d\x9e*"Fs2\xc9Yd\n\xd0\xebM-\t\x1d\xdf8{P\xf8R\x98T\xeb\xa0\xd0\x9b#\x98\x9a6\xacsU\xefn\xa67\x19\x7f\x84HZ\xa5 J\x10\xff\xf3c\x8a~\xfb\xc7\xd7s\x0b}3\'f\x96@N\x8bfY\xa3F\r\xd6\x16E\xbc\xc8c\x85(\xc6\xb3Z\xd5\xc60mya\xd3;\'\x8cA\x8a\x04\xc1}#\xaf\xde_\xb1\xee\xbd\x15\x9fp\x90\x02\x07\x10\xbfL\xb2\xa2. \xce(9#5\xfc\xd0\x03\x93\x04EMYF\x11|\x12O\xb7\x8bC\rEIT\xc9zA\x05\xd0\xf0k\xfa\xb5i\xd9\xbcd\x02g\xc4g\xc47P\xeb\x8b\x9b\r\x1f\xd2W\xb0\x8a\xc3\x99J<8\xb6\x8f8\xe0\x95mx\x1d\xacX\x92\x14\xfd\xe9\x03\x93\xd2\xd3\xecm\xe7gT=9H\xbb\xb4\xe7\x9b\x19\x9c\xf7Wn\xf8`\xe5z[6\xd7\xbab\x05\xc4\xa6L\xbc\xb9\xd5\x85\xcd*\xd2\x16\xaaN\x00\xa3\x92:\xcc7\x8e\x18x~\xfd0\x80g\x9ds\xe6wi\x7f~a\xd6\x81\xa3ylKL\xda\xb8\xd1\xd9\xfb\xd22\xc4\x1f~M\xdfV\x174@TT\x99W\xc3\xd4\x03A\t\x84*z\xe7\xf8\x1b\xab\x1a\t7\xcdA\xb8\xe3\xf6\x91\x82#\xd2\xe0\xd7\x92\x8d\xf0\xa4&\x05y\xadZ\xd4\x1fqM\xdfJ\x0b\xafQ\x90\xac\xc8\xc6\xf7\xc7\x07\x8f\xe6\xfe\xf9\x85Y R!\x0e/E\xf4\x1b\xd6uF\r\xbf\xcaE\xae\xc8\xf8-\xd7*\xbb?\xc0\xc4yk\xa5\x86~\xf1\xf0d\x01\xb6 \x8f\xc1\xc8\xa0\xd8\xb1\xe7\xf0s\xcfO\x8f1\x9bkxI@\xe5uC\x85\x94).N\x9d|\x8b\x84\xe8Y\xe4G\xdcR6\x8a\x08\xf8\xbd{t\xba\xa4u\xb3j\xa5\x9a"R\xbb\xd6\xcd{v\xefh\\ P\xe2\xed.5\xc2\x13\x7f@\x8e\x88\xdd;\xf9\x96T\x17E\x15\xee\xb0\xb4\xe7Fi\x8b\x02\xff\xf4\xf7\xe9;\xf6\x1cV \x82\xb4@\xbd<\x91_<<%+-T\x95\x02\x81\x95\x10\x80\x82\x03\xe5_?\xa4O\xff+\xbb\xc6A\xd2z\xdf{ \xe7.Y\xb9a\xcb\xd7\xa0M\xbed\xbd1\xb11\net\x83\xeb\xaf\xed\x7fQ\xb3\x06I\x8aJ\xd2\xf7\xad\xc7\x9e\xd5\xc4q\xa3\x1d\tP\xad\x8a\x80\xec\x87$M\x1c7\xda\x12\xa0\xf2\xafc\xacE\xf3\x06\xd7];\xc0\\\xadT\xc9TD)\x1c\xcd\xd9\xb0y\xfb\xdc%\x1f\xf8\xc2\x81\x125\x87y@\x9f\xae\xd7\x0f\xedc\xe2\xdf\x95\xe7\x86V~\xbd\x80\xbd_\x10A<\xfd\x8b\xa9\xe7e\x86l\xd5"M\x15\x14\x1e9?{\xf4\xbf\x8fg\x9ffB\xdf\xf3\x14\x95\xc5\x01\xaa\x84\xd48#9\x05\x12\x87\x1d1e\xd2MRyBk@&\x17\x11\x95q\xe2\x97\xf3\xa0!\x92C\xd8\xf6\xc2\xf3\xfb^\xd9\xd1\x1c\xbc\xea\\\xe0\x00\x0e\x90\xbc\xaaO\xe76\xcd\x1b\xb8J\x94VZ\x88{\xf7\x946-\x8d%\xa8\xb4\x9d\xe2(\xef\xae;n\x0e\xbb\xb6\x18\x7f\xf2\x9a\x94\x9d\x0b\xfb\xec)?\xc2D\xd9\'\xf2~\xfa\xd8oc~\x18\xcdE\x01\xca\x18|u\xd3\x9d\xa7\x1f\x9b*\xad\x12U\x85\x1a\t\x95\xc9\x80`\xdcR\xa0\xbc\xb0Y\xc3\'\x1e\xbdG\xa8bi\xb4\x1a\x9b\x16w\xf8X\xfe}\x0f\xfe\xeat\xb12\xd2\xb3,\x01*r\xa1\xa0\x8dj\xd0\r#\x06^\xd8\xb4\xae\x95\x82V\xdb\xab@\x1b3\x8e\xdc\xf1\xb7^\x1f\xb2N\xb9\xca\xee:*\xd7\x0c\'v\x05O\xbau\xb4P*\xf9\x9a\x18\x19\xcf\xda"\x90\xc0xq\x93\xba#\xaf\xbd\xcad{aE\'\xa6\xec\x00Y\x9aD\xd4\xd3\xc5\xea\xde\x07\x7fy\xf8x^\x80CG)\xb5\x18/z\xf2\xe7S[4m`\x91\xb8\x95F\xd1\xabw\x8b\x12\x11\xddx]\xbf\x07\xee\x1a\xe3\xa8\x88u\x86\x19;2\xbca\xdb\xbe\xa9\x0f\xfe\xfata\x0c\xcbg\xe5T\xe8\xe93\xfa=\xa5\x86\xf0\xf1\x87\'\x03\xc4\xcc~\x94\xc8(\x93B=\xc8p~\xfd\x8c1#\xaf\x91f\xf1\xab\x97u\x84\x96\x19\xc3\xe8\x1b\xaeiP/#\xf9\x1a2\xc9J\x900\xa1S@\x88=\xfe\xc8\x94TSZ\xc9\x9ax\x15EM\x82\x954\xde\x0by\xbaPM}\xf0\xd7\x9f~\xf1\x1d\x05\xd8E\x10\nB\x14\xbd\x7f\xca\x98\xd1\xd7\xf5+\xefE\xaf\xa4U\x83\x00RJ\x07\xfc\xa9\x93\xc7^\xd9\xfbR\xa4\x88VG\xc9\xdc\xe3\x86\xe1\x0f\xd7\x7f\xf1\xd4\xb3\xcf\x17DX\xef\xb6\xb3\xf9J\xd9\xa62\nTW\xf5\xeb\xd1\xb1}\x0b\x84\x18\x07E\xf9\x12\x01O\x82\xfdA\x03\xba\xa5\x85P\xa2@\x13\x1b\xa8\xe2P\xe3\x8ep)Q\xa6\xa5\xc8AWu\xc5\xf2U\xfbK\x12\xe1LQ\x98h\xa7K.\xb8\xaa_\x0fs\xf9z\xc0\xc5\xcf\xf4$\xa5\x14\x11\xe4G\xd4S\xcf\xfem\xf5\xfam\x84a\x837\xd4\x9d\t*\xee\xdb\xab\xe3\xbdS\xc6Js\xd7a\xd5k\x04V3k\x8b!5,\xff\xf4\x87\'.m\xdb\xc8!\xa3\xa3\xa3\x92\xec3\x85f/\xfed\xf2\x03\xcfF\x8a}\xb3\xfe\x15\xde\xc0\x19\xe4y#Hb\x10\x0e>\xf1\xe8\xdd\x08\xf9l\xca\xb1&\xd7\xd7:/+\xfd\xa6Q\x83dPm\xac:J(\xd8\xeb\xedM\x06#\xc7n\x1c}u\xed\xdai\t_\x88\x8f\x8f$\x17=\xfe\xf0\x14\xe9\x18L\xbd\xb9\x88WT4r\x9bD\xca\x0c\xd1\x88\xba\xe3\xfe_\xcfY\xba\x9e\xcd=\xed&\x0c\xe08\xc4\x1d\xda\x9d\xff\xe7?<\x9e\x1a\x16\\\xcd{\xe6\xabI\x00!\x1d\x89\xe7e\xa6\xbc\xf8\x97g\xea\xd4\x0e\x1b\xf4hP\xcd\x1eE\xe8\xe3O\xbe\x99\xf2\xe03\xc51\xcf\xdc9F\x9e\nJ\xa4\xa8\x12x\x9cM\x03dp\x84+P\xf4\xbc\xac}\x9f\x1e]\x90\x90Y\x92\xa9u`\xd4+\x93Y\x03\xea\x9a\xab\xbavl\xd7\xa6\xfc\x85\x12Um\xf1{\xb4\x00\xd0\xe9\xd4\xae\xd5\x90\x01\xddL!\x03{\x88\xf4\xbeQ\xe8\x83q\xca\xf6\xee\xd6\xa9\xe7\xe5\xed\x05\nG\x84\x02\xb03\x88\x12\xcb>\x90\x14d\xf1+\xaa\xc8\xf3\'\xff\xf8\xe9\xf5\x9f\xed\x02S0\x85\x85O\xc4\x82\xb9v\xad\xf0\xdf\xff\xfcL\xad\x8c\x14)%\xc8\xeae\xc8V\x8f\x00l\xb3<\x10\x9a5\xaa\xfd\xc4\xa3S\xd2SH (B\xd0\'\x91@\xe0\xaau\xdb\xfe\xdf\xb3\xcf\x9f.RJ\x81\x13\x98\xb4\xf1\xbc\x8e\xb8\rk8\x80\x89\xf41=0u\x82$\xcf \x90Jk\x7f\x0b\xbdR\xb1\xa1W_!j\x90\xec\x18\x7f\x9a\x96\x8d\xd7\x0e\xee#\xd0\xc7\x00\xf4l\xcb\x11\x9a\x95f\xef\x81\xfb\'b\xa0C\x97x\x9f\x82\xff\xc6w\xb2\x053aA\x11\xfd\xf2\x99\xbf}\xf8\xc9\x17lmg\x14\xa6r%\xa5\xa7\xd2\x93?\xbf\xbbY\xa3:\xd2\x88\xe2\xea\x96\xc48\x87\xc4Q#]\x89F\r\xef\xff\xe8\xcf&J\xf6\x04K0e.\x19=\x04w\xe6\x82\x8f\x1e|\xf2\x0f\x9eBVd2al\xb9\x1eN6I\x18T\xe7Nm:]r\x81\x00O3\x83@\xf1\x07\x04\xafQ\xdd\xcc\xde\xbd\xba\x96\xa93\x7f\x0ey\xbfqrJ\xd1\xb3\xe7\xe5\xe7\xd7\xcb\x90\x18/\'\xa1%\xb4#\xd8\xeb\xd8\xbe\xc5e\x9d\xda$\xa3\xad\x8c\xb3\xc1\xdc\xd1k\xafR\x00\x8e\xfa\xfc\xc8/~?g\xfe\x87\x84\x8e\x12\xbe\x96\xdf\xa6L\xab\x04\xef\xd1\x9fN\x1aum?\xa4s\xbcL\xadz\x04(\xf1\xb7HGHA\xe3n\x1ev\xf3\xc8\x81\x92\x8a\x85\xbd\xea\x90\x95>\x10\x98\xbad\xc5\xa6\xfb~\xf6\xeb\xdc\xc2\x98O\xe8\xf9\x8a\xcf\x80\x0e\x17B\xba\x82G\r\xef\xeb@q\x00!\xb0pA\x8aN\x18;\\k\xe5\xf1,\x88\xea\xce\xaad\xbcV\x1fI\t\x89\xf17\r\x15\x1c3\xb7\x8eh\xbe\xa9\x88]\x8c\x8c\x1e\xde7$\xcf,0\x89<_)\x82\x93\xf9\xd1{\x1f\xfa\xf5\x92\x95\x9bb\x98j\xd0\xbbD\xa4L\x80\xbax\xec\xe8A\xe3n\x1e\xea\x08\x92\x8e\xb4\xc2\xbb\xba;\xba\xba\x04\x08\xca\xd5\xd8\x0c)G\xf0\xaf\x9e\xb8o\xec\x8d\x83\x91\x8b\xa5p\x10\\\x12\xca\x04\xdf\x9de\xab?\xbf\xe9\x8eGv\x1f8B \x85\xfe\xa8\x82\xa6%\xb1\xc0\xeb\xaf\x1d\xd0\xbe\xed\x85d\xf2CY+\xe6*#=|\xcb\x8d\xc3\xb0\x9cUQ\xa5L\xa3r}\x97\xf9\xad\x00u\xcb\x8d\xd7\xa6\xa7\xb8qU\x98\x85\x84\xb6\xad[\\7\xac\xbf\xc9YO\xbaE\xd1\x1ess%\xf2\x9e\xfdGo\x99\xf4\xf0\xf2\xd5[bB\x92 \x01\x9e\x00\xe9\xa2t z\xd3\xc8A\xbf|\xec>WpP\xd6\xd7(W\xd5\xbdyW>\xf5\xd4S\xd5\x9c\x18\x96\xdag&\x85\xa7\x7f\xbf\x1e\xb5237m\xfa\xc2W\x9a*\x12m\xd0\xdb9v*\x7f\xfe\xc2e\xc4\xa2]\xbbVf;\xfbHAMW{\t\xb7\x05\x8c\xa6\xa6\x85d(\xf4\xc1\x87\x1b\x14\x84\xb4\x80\xa1\xc8]w\x8c\x1a\xd0\xa7\x8b\x93h\x9fU\xeb\x1c`\xd9\x7f\x198%\x1c.\x8az\x9b\xb7|\xa5\xb4\xe6\xc6\x82\xbcG~<\xbeG\xe7\xf6"\x98\x88\x1f\xd8\x0ed\xfd\xa0\x1e\x03\xe6\x15z/\xbc6\xff\xa1\'\x7f\x7f\xe0H>I\x97M\x1d$\xeb#LK\x81\x9f\xfft\xe2\xc3\x0f\x8c\x0f96\xe5\xb7\xc4\xe6\xe2 \x9f\xa3\xea\x03\xadIQ\xe5\xb8\xd6\xcc\x9e\xc2\xb9\x0bW>\xfd\xbb\x97s\xf2=#\xf6\xecM\xabZw\x0b\x81\xea\x7f\xc5e?\xbb\xff\xd6\x0e\xed\x9b\x0b\x13"\x13\x18\x94\xa2\xb5\x90\x0f\x02\xff\xc4\xe9\xc8\xe0\xe1\x93\x8f\xe5\x01*\xa8\x93\xe6/\x9a\xffB\xf3\xc6\xe7\x85\xaa\xe0\x14\xab\xfaH}\xa5\x0e\x1c\xc9\x191\xf2\x9e\xdc"W!7\xaa\x83\xef/~\xb9^\xadTan\x936\x95\xc6\xd1^\x1a+L2\xc8\x97_\x1f\xf8\xdf\xbf\xbc\xb9z\xfd\x96\x08\x0b\x94\x02\x82\x0b\xe6\x91H\xd5\xcet\x1e\x7fx\xf2M\xd7\x0f\n\x0b\xabrV\xcbQ\x9b\xd8\xaa{\x02\x92\x9b1j\x94wI\xbb\x8b\x07\x0f\xee\xb3~\xc3\x86\x9cS\x05@!\x10\xd2\\\xbc\xaeU\x8c\xbd\xfb\x0f\xcfy\xe7]\x90)\xed\xdb^\xe0\x86@\x08e\xe0\xfc\x92\x84\xd5\x88T\xc8\x95\x9d;^\xb2\xe1\xd3\x8d\xb5S\x9dg\x9f~\xe8\xf2\x8e\x17\x1b4i5\xec\xc9*4\xafVff\xcb\x8b[n\xd9\xf4e\x9d\xac\xf4\xe7~\xf7P\xcb\x0b\x1aI\x81 L\xac\x8cL\x01"\xe1\x13\xf0\xe9"\xff\xef\xd3\x96\xfc\xe4\xd1g\xf7\xec\xcf\xf6Lt\xddD\xb8\x1c\xa1\x84\xe4X\xdb\x96\xf5\xa7\xbf\xf4\xdf}{t\x00\xa5\xa4\xdej\xa2&2\xea\x9fr\x02\xac\x96i\xef\x94\x13GO\x15\xde\xf7\xc0S\x9b\xb7\xecQ"%\xd0-\xe37L#\xf8\x9d\xda6\xfb\xed3\x0f\xb5k\xd5X\xebN\xfa\x13m\xfe\xa3\xe6\xfe\x04\xe0F\x8c\x87\xccu\x08\x83\x8b\x07\x12\xa1A5jz\x04>\x83\xf4\x15(Pa\xe9"\xc4L\xacT\x120\x92G \x14\x88o\xbe\xfd\xfe\xd1_\xfc~\xdb\xae\x83\x80np\xd1\xa7\xd1^\x05\xa3\xa3\x8a\xbbun\xf9\xc2\x9f\x7f\xd9\xa0nZ\x90t\xc4\x95\xe7+U\xdajD\x80\x92\x00r\x89\xc9\xe2\xfb\x94W\x18\xf9\x9f\xe7^}c\xd6{(\xd2\xb5V\x84\x1c\x98k\x06X\x9e"\xd4\x98\x1b\xae~`\xea\x98F\xf5\xb3\xf4\x06b\xc7\xca\x03\x04\x87\xb5\x9d,\x18\x0c\x10\x89\xddj\xe2P+\x1b\xa8\x1e@\xcc\xd6\x81\xd6\x8f\x80\x90\xc9\x81\xb1V\x9eO\x84\xc7\x8e\xe7>\xf7\xfc\xec\xb9\x0b?\x88rpOU\xfc\x97\x06\x96\xae\no\xbb\xf9\xea\x87\x7frg\x9d\xb4\xb04\xb7\xd6\xc6\xcb\xf8T\xa5\x12\xc8\xd9\xda?\x8b\x00`\xa1\xedh\xfe\xdfg\xf9\xd2\xab\xf3\xff\xf2\xfc\x9b\x05\xbe\xb0\x80\xa2\x00: \xd8Q!\x170#\xacn\xbei\xf8=\x93\x86\xd7\xafw\x9e\xf1r\xfa\xc6\x07\xe6\x04u)0^\x93\x1c\xcb<\xe7\x9c\xe7h~ks$LIQ\x8bL4\xf7\xfc\xb3C\x84\'N\x9exi\xda\x92\x99\xb3\x96\xe4G\xd0\x17\xe0\x0b\xcf\xd5\x82\xc0\x8c\xdc\x18\xe7\xb5\\\xbe\xff\x9e[\xa6\xdc9\xdaA\xadfh\xed?\xee\x9a\xc5\xc0oq\xee{\xa5\x86\x04\xa8\xb8\x19\xa7\x15}\xf5\xcd\x9e_\xfc\xea\xf9m;\xf6j\xf5F\xabK@\xc23Kk\x13\xbe\xb0\x96\x8c\xdcp\xdd\xe0\xbb\'\x8fi\xde\xb8\x9e\x00\xa5\xec]\x98"P\xcc\x13\x12\x7f\xabq\xd4\xcb{\xd4\xb0\xf4=\xbd\x11\x94\xaf\x84@\xc1\xbeBy\xf0\xf0\x89\x17\xfe1g\xf1\xa2\x15\xb9*\x0cA\xf0\xded\xa9*\xb3\x15\xd8\x97\xe8]\xda\xba\xc5o\xfe\xeb\xdeN\x97\xb4\xb2\xee\xc8\x7f\xe2*\x05\xc3\xfb\x81\x08`\xdc\xd7\x1c\xf1\xd4\xcb\xaf\xcf\x7f\xfe\x1fo\x15D5{\xb7\xf5\x8d\x84\x05\xe3\x00+\n\x0b\x8ee\xa6@\xbf\xde]\xef\x98pc\xa7N-\x1cG\n\xcdzD\x89/\x80\xcbhvU\xbc\xaa\x1e\xca\x19\xde\x1c\x87\xa4\xd98\x0c\x11\xb0\xe7\xfb[\xbe:\xf4\xda\xb4\xd9k\xd6m*\x8c \x83\x0b2\xca\xf6\xba\x04\x93\xd8i\xe0r~FX\xdd;\xf9\xd6\xc9\xe3G\xa6\x85\x03w\xc8\x7f\x0c\x01\xe2<\x97l\xe9\xbbCGsg\xccZ\xf2\xe6\x9c\xa5\xb9\xf9>\x93\x81\xc70\t\xc9\x9e\xa9\x03,\x83\xcb\x06\xfc\xc6\xf5\xea\xf6\xe8\xd6\xb9[\xd7v\x9d:\xb4n\xd9\xb2y\x9a\x13\xb7\x18\x82\xb4QQ\x82\x08=\x93\xe4+[\x12\x18m\x14\x06\x83k.#>\xef\xd9sp\xeb\x17;>\xdd\xf8\xf5\xe6\xcd\xdb\x0e\x9c8\xa1\xc5,He\xd4P\'\x9e\x15m#\xa7\xb53\x9d[\xc7\\;a\xec\xf0\xa6\rk\x0b\xf0m\xe2\xc9\x0f\xb1J? \x01L\xb3\xda\x11*\xe2\x98\x82\xf5\x9fm\x9b=\x7f\xf9\xfb+>\x8d\xf9\x92\x02\xb4\x8c\xa9\xfe\x8b\x92Mp\xd2\x89\x86\x85P\xcc\x91\xdau\xd2.\xbd\xb4\xd5\xe5\x97\xb6j\xd3\xfa\xe2\xf6m/nP\xbfNZ\xd85\x913\x8c\xa3\x7f*\x90\tqB\x05W\xbd\x10Bq\xd4?\x9e}j\xfb7\xbbw~\xfb\xdd\x96/wm\xdf\xbe;\xe7T\x11\xc8\x14 \x87d1\xa0\x13\xc0\x8fP\xbf\x06\xfd_\x15r\xd5\xd5\x83z\xde4zH\xefn\x1d\xc3\xd2T\'+9~?L\xfb\x01\t\x10g\x1dlr\x8c\x89Q*\xc6ov\x1dx\xe5\xb5y\x8b\xdf_\x1d\xf3\x01)\xa4\x95?\x0c\x91`\x12\xca%\xa3\xa5\x98{y\x98\x1d\x901\xad\x1dQ\xb4VzJ\xf3\xa6\x8d[6o\xdc\xa2i\xa3\xf3\xcfo\xd0\xe8\xfc\x06u\xeb\xd6\xc9\xccL\x0f\x85\\\xc7q,\xc7\x8bDc\xf9\xf9E\xa7N\xe5\x1e\xf9\xfe\xe8\x91#\xc7\xf7\x1e<\xb2\xe7\xd0\xf7\x07\x0f\x1f\xcd/\x88\x00\x86\x19$\x93k\xca;\xfb\xcc\xbe\x10\xc0$\x8d\xde\x05\xcc>";\x18\r\t\x1cqM\xff\xc9\x93nl\xdb\xba\x99\xa3\x97\xddGS\x1d\x90\xaa\x9e pN\xed\x07=\x01\x89\xcd\xea#\x8a\xf1\xbb\x83\'\xa6\xbf\xb5p\xde\x92\x15\xb9yE\n\xc2\n\x04\x08p\xcdU\\F\x9b\xb2\xd5\xbc\xe2\x97W\x05\x0eL"\x0b\x0c\x8d[\x15\xa2L\x0c\xc7\xf0\xee\xb0\xads\x1c\x84\xdd,\x96\x92K\x93\xb7\x198\x8e\xcfd\x1f%\x90B\xf0\x1d\xa0\xdaY\x19\xa3\x87\xf5\x9bp\xfb\xe8\x0b\x9b\xd6\x93X=y_\xf3\xf6/&\x00#\xc4L\xe5g}\xfc\x0b"\xde\xf2\xf7>z\xfd\x8de\xdf|\xfb}\xcc\x17\xec\xd8z\xb8Jk\xe8z\xe9J\xb2\x8b9PN1X\x1e\xbb\xc2\xf1J\xb5&\x08\x8a\x81\xeb\x93K?3\x06\x96I\x8f5U\xbb\x94\xf1\xa2\x1bnn\x102\xae\x8c\xb5k\xd5d\xe2\xb8\xe1W\x0f\xea\x97\x99\x1e2\x9f)\xf3\x04\x19/\x1f\xfc\xafh\xff:\x02\x04\xaa\x89\x05\xa2\x9027\xdd\x80\xb9\x80\x0c\xbf\xdeu`\xee;\x8b?\xf8h\xeb\x91\xa3\xc7\x19\x1c{O\x00K0p\xec\xf8F7(\x92R\xf1\x1bx\xcd\x82BH&\xda&J\x81-q\xcf\x98y\x04!\nS\xf3Ji\x83\x03T\xe3\xc6\r\x07\xf7\xbbl\xf4\xf5\xc3.i\xd3"$\x0c\xd8\xcfhG\x06\x93mQ\x1a\xff\xbaC\xf0\xaf=\x01\x0c\xa5\xc5\xae\x82\xe7\x9b\xab\x0f\x99\x15\x83O\xee\xce\x9d{?^\xfb\xf9\x86\xcf\xbe\xfa\xea\xcb\xdd\xb9Ey\xacm\'\t\xc2\xf5)\xb8\xb2\xa1lg\x81\x9e\xca%\xf5x\xca\xf8 \x19\x05JV1\x01\xbe\xd4\xd6\x13g\xa6gu\xea\xd8\xa6g\x8fK\xaf\xb8\xe2\xb2\xd6\xad.peL\xa2c\xf2R1\xa8\xf2\x8c%c\xfb\x97\xf2\xa0\x7f%\x014{Q\x80\xca\xc4#\xadZ\x87\xb6(\x91M\xe5\x86\x98\xcd\x89G\x84\x82"\xff\xabo\xbe\xfdr\xfb\xce\xcf\xbf\xdc\xfd\xf5\xee\xfd\xdf\x1f;YT\xe8\x95\x053\x1a\xd41\x96!@\xb9\\\n\x04HK\x0b7nX\xa7m\xcb\xe6];\xb4\xecxi\xdbK\xda\xb7JKq\xad\xdb\nm\x05\x0b\x0c\xe2\xa3\xd6n3\xb59l\x15^>\xb7\xd8\xd6\xb9\xb5\x7f\xe9\t8\xb7\xc6\xcc\xb1X,\xb7\xa0\xf0d\xce\xe9\xbc\xbc\xfc\xbc\xdc\x82\x82\xfc\xa2\xa2\x98\xe7\xf9d!0B\xc8\x90#R\xc32##-\xabvfVVF\xdd:\xb5jgd\x84B\xa1\x7f\xaa?\xf5\x07i\xff\x19\x04\xb0y^q\xa1k\xeb\xc1\xa8\xb8MPrgH\xb0\xda\xc1\x1d\xc2A\xe1\xcd\xff\x8f\x00\xff\x8c\x16\xafC\x06\xf1\x82UlA\xfa\xb6\xb8\x12bI\xf2\xbb5\x95\xad.$\xfe\xff\x7f\xf5\xffc\x08`\x05x\xb9\x97\xe8\x95\x07\xffJa\xef\t.\x0b\x8d\xfcOh\xff9\x04\x00.\x17\x91\xe6\xf29\x9aqPUI\xea2\xfe`\xde\x9b\x7fn\xfb\xff\x05\x00\x00\xff\xffe4\x83\x84\x8e\xd8\x15\xc9\x00\x00\x00\x00IEND\xaeB`\x82'

def test_logo_missing():
    assert YahooReader("ACU").logo() == b"\n"

class TestHistoricalData:
    def test_default(self):
        data = YahooReader("SPY").historical_data()
        assert all(
            key in (
                "type",
                "currency",
                "utc_offset",
                "timezone",
                "exchange_timezone",
                "url"
            )
            for key in data["information"].keys()
        )
        df = data["data"]
        assert all(
            col in (
                "open",
                "high",
                "low",
                "close",
                "adj_close",
                "volume",
                "dividends",
                "splits",
                "simple_returns",
                "log_returns"
            )
            for col in df.columns
        )
        assert all(isinstance(date, pd.Timestamp) for date in df.index)
        assert all(df[col].dtype == "float64" for col in df.columns if col != "volume")
        assert df["volume"].dtype == "int64"
    
    def test_timestamps(self):
        df = YahooReader("SPY").historical_data(timestamps=True)["data"]
        assert all(
            isinstance(date, int)
            for date in df.index
        )
        with pytest.raises(TypeError) as exception:
            df.resample("M").last()

    def test_returns_off(self):
        df = YahooReader("SPY").historical_data(frequency="1mo", returns=False)["data"]
        assert ("simple_returns" not in df.columns) and ("log_returns" not in df.columns)
    
    def test_monthly_frequency(self):
        df = YahooReader("SPY").historical_data(frequency="1mo")["data"]
        assert all(isinstance(date, pd.Timestamp) for date in df.index)
        assert isinstance(df.resample("Y").last(), pd.DataFrame)

    def test_hourly_frequency(self):
        df = YahooReader("SPY").historical_data(frequency="60m")["data"]
        assert all(isinstance(date, pd.Timestamp) for date in df.index)
        assert isinstance(df.resample("d").last(), pd.DataFrame)

    def test_minute_frequency(self):
        df = YahooReader("SPY").historical_data(frequency="1m")["data"]
        assert all(isinstance(date, pd.Timestamp) for date in df.index)
        assert isinstance(df.resample("h").last(), pd.DataFrame)
  

class TestETF:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("SPY")
    
    def test_isin(self):
        assert self.reader.isin is None

    def test_security_type(self):
        assert self.reader.security_type == "ETF"
    
    def test_profile(self):
        profile = self.reader.profile()
        assert all(
            entry in (
                "phone",
                "description"
            )
            for entry in profile.keys()
        )
    
    def test_fund_statistics(self):
        statistics = self.reader.fund_statistics()
        assert all(
            key in (
                "company",
                "type",
                "expense_ratio",
                "turnover",
                "aum",
                "style",
                "style_url"
            )
            for key in statistics.keys()
        )

    def test_holdings(self):
        holdings = self.reader.holdings()
        assert all(
            key in (
                "equity_share",
                "bond_share",
                "holdings",
                "equity_data",
                "bond_data",
                "bond_ratings",
                "sector_weights"
            )
            for key in holdings.keys()
        )
        assert isinstance(holdings["holdings"], list)
        assert all(
            all(
                key in (
                    "ticker",
                    "name",
                    "percentage"
                )
                for key in item.keys()
            )
            for item in holdings["holdings"]
        )
        assert all(
            key in (
                "average_price/earnings",
                "average_price/book",
                "average_price/sales",
                "average_price/cashflow"
            )
            for key in holdings["equity_data"]
        )
        assert all(
            key in (
                "average_maturity",
                "average_duration",
            )
            for key in holdings["bond_data"]
        )
        assert all(
            key in (
                "bb",
                "aa",
                "aaa",
                "a",
                "other",
                "b",
                "bbb",
                "below_b",
                "us_government"
            )
            for key in holdings["bond_ratings"]
        )
        assert all(
            key in (
                "real_estate",
                "consumer_cyclical",
                "basic_materials",
                "consumer_defensive",
                "technology",
                "communication_services",
                "financial_services",
                "utilities",
                "industrials",
                "energy",
                "healthcare"
            )
            for key in holdings["sector_weights"]
        )
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            df = self.reader.historical_data(frequency=freq)["data"]
            assert isinstance(df, pd.DataFrame)
            assert all(isinstance(date, pd.Timestamp) for date in df.index)
            assert df.index.is_unique == True
    
    def test_logo(self):
        assert self.reader.logo != b"\n"
    
    def test_missing_data(self):
        with pytest.raises(DatasetError):
            self.reader.analyst_recommendations()
        with pytest.raises(DatasetError):
            self.reader.recommendation_trend()
        with pytest.raises(DatasetError):
            self.reader.institutional_ownership()
        with pytest.raises(DatasetError):
            self.reader.fund_ownership()
        with pytest.raises(DatasetError):
            self.reader.insider_ownership()
        with pytest.raises(DatasetError):
            self.reader.ownership_breakdown()
        with pytest.raises(DatasetError):
            self.reader.insider_trades()
        with pytest.raises(DatasetError):
            self.reader.esg_scores()
        with pytest.raises(DatasetError):
            self.reader.sec_filings()
        with pytest.raises(DatasetError):
            self.reader.income_statement()
        with pytest.raises(DatasetError):
            self.reader.balance_sheet()
        with pytest.raises(DatasetError):
            self.reader.cashflow_statement()

class TestFuture:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("GC=F")

    def test_security_type(self):
        assert self.reader.security_type == "FUTURE"
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            df = self.reader.historical_data(frequency=freq)["data"]
            assert isinstance(df, pd.DataFrame)
            assert all(isinstance(date, pd.Timestamp) for date in df.index)
            assert df.index.is_unique == True

    def test_missing_data(self):
        assert self.reader.profile() == {}
        with pytest.raises(DatasetError):
            self.reader.analyst_recommendations()
        with pytest.raises(DatasetError):
            self.reader.recommendation_trend()
        with pytest.raises(DatasetError):
            self.reader.institutional_ownership()
        with pytest.raises(DatasetError):
            self.reader.fund_ownership()
        with pytest.raises(DatasetError):
            self.reader.insider_ownership()
        with pytest.raises(DatasetError):
            self.reader.ownership_breakdown()
        with pytest.raises(DatasetError):
            self.reader.insider_trades()
        with pytest.raises(DatasetError):
            self.reader.esg_scores()
        with pytest.raises(DatasetError):
            self.reader.sec_filings()
        with pytest.raises(DatasetError):
            self.reader.income_statement()
        with pytest.raises(DatasetError):
            self.reader.balance_sheet()
        with pytest.raises(DatasetError):
            self.reader.cashflow_statement()
        with pytest.raises(DatasetError):
            self.reader.fund_statistics()
        with pytest.raises(DatasetError):
            self.reader.holdings()
        assert self.reader.logo() == b"\n"


class TestCurrency:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("EURUSD=X")

    def test_security_type(self):
        assert self.reader.security_type == "CURRENCY"
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            df = self.reader.historical_data(frequency=freq)["data"]
            assert isinstance(df, pd.DataFrame)
            assert all(isinstance(date, pd.Timestamp) for date in df.index)
            assert df.index.is_unique == True

    def test_missing_data(self):
        assert self.reader.profile() == {}
        with pytest.raises(DatasetError):
            self.reader.analyst_recommendations()
        with pytest.raises(DatasetError):
            self.reader.recommendation_trend()
        with pytest.raises(DatasetError):
            self.reader.institutional_ownership()
        with pytest.raises(DatasetError):
            self.reader.fund_ownership()
        with pytest.raises(DatasetError):
            self.reader.insider_ownership()
        with pytest.raises(DatasetError):
            self.reader.ownership_breakdown()
        with pytest.raises(DatasetError):
            self.reader.insider_trades()
        with pytest.raises(DatasetError):
            self.reader.esg_scores()
        with pytest.raises(DatasetError):
            self.reader.sec_filings()
        with pytest.raises(DatasetError):
            self.reader.income_statement()
        with pytest.raises(DatasetError):
            self.reader.balance_sheet()
        with pytest.raises(DatasetError):
            self.reader.cashflow_statement()
        with pytest.raises(DatasetError):
            self.reader.fund_statistics()
        with pytest.raises(DatasetError):
            self.reader.holdings()
        assert self.reader.logo() == b"\n"

class TestCrypto:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("BTC-USD")

    def test_security_type(self):
        assert self.reader.security_type == "CRYPTOCURRENCY"
    
    def test_profile(self):
        profile = self.reader.profile()
        assert all(
            entry in (
                "name",
                "description"
            )
            for entry in profile.keys()
        )
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            df = self.reader.historical_data(frequency=freq)["data"]
            assert isinstance(df, pd.DataFrame)
            assert all(isinstance(date, pd.Timestamp) for date in df.index)
            assert df.index.is_unique == True
    
    def test_missing_data(self):
        with pytest.raises(DatasetError):
            self.reader.analyst_recommendations()
        with pytest.raises(DatasetError):
            self.reader.recommendation_trend()
        with pytest.raises(DatasetError):
            self.reader.institutional_ownership()
        with pytest.raises(DatasetError):
            self.reader.fund_ownership()
        with pytest.raises(DatasetError):
            self.reader.insider_ownership()
        with pytest.raises(DatasetError):
            self.reader.ownership_breakdown()
        with pytest.raises(DatasetError):
            self.reader.insider_trades()
        with pytest.raises(DatasetError):
            self.reader.esg_scores()
        with pytest.raises(DatasetError):
            self.reader.sec_filings()
        with pytest.raises(DatasetError):
            self.reader.income_statement()
        with pytest.raises(DatasetError):
            self.reader.balance_sheet()
        with pytest.raises(DatasetError):
            self.reader.cashflow_statement()
        with pytest.raises(DatasetError):
            self.reader.fund_statistics()
        with pytest.raises(DatasetError):
            self.reader.holdings()
        assert self.reader.logo() == b"\n"

class TestIndex:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("^GSPC")

    def test_security_type(self):
        assert self.reader.security_type == "INDEX"
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            df = self.reader.historical_data(frequency=freq)["data"]
            assert isinstance(df, pd.DataFrame)
            assert all(isinstance(date, pd.Timestamp) for date in df.index)
            assert df.index.is_unique == True
    
    def test_missing_data(self):
        assert self.reader.profile() == {}
        with pytest.raises(DatasetError):
            self.reader.analyst_recommendations()
        with pytest.raises(DatasetError):
            self.reader.recommendation_trend()
        with pytest.raises(DatasetError):
            self.reader.institutional_ownership()
        with pytest.raises(DatasetError):
            self.reader.fund_ownership()
        with pytest.raises(DatasetError):
            self.reader.insider_ownership()
        with pytest.raises(DatasetError):
            self.reader.ownership_breakdown()
        with pytest.raises(DatasetError):
            self.reader.insider_trades()
        with pytest.raises(DatasetError):
            self.reader.esg_scores()
        with pytest.raises(DatasetError):
            self.reader.sec_filings()
        with pytest.raises(DatasetError):
            self.reader.income_statement()
        with pytest.raises(DatasetError):
            self.reader.balance_sheet()
        with pytest.raises(DatasetError):
            self.reader.cashflow_statement()
        with pytest.raises(DatasetError):
            self.reader.fund_statistics()
        with pytest.raises(DatasetError):
            self.reader.holdings()
        assert self.reader.logo() == b"\n"


class TestMutualFund:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("TRRHX")

    def test_security_type(self):
        assert self.reader.security_type == "MUTUALFUND"
    
    def test_profile(self):
        profile = self.reader.profile()
        assert all(
            entry in (
                "address1",
                "address2",
                "address3",
                "phone",
                "description"
            )
            for entry in profile.keys()
        )
    
    def test_esg_scores(self):
        scores = self.reader.esg_scores()
        assert all(
            key in (
                "month",
                "scores",
                "involvements",
            )
            for key in scores.keys()
        )
        assert len(scores["involvements"]) == 0
    
    def test_holdings(self):
        holdings = self.reader.holdings()
        assert all(
            key in (
                "equity_share",
                "bond_share",
                "holdings",
                "equity_data",
                "bond_data",
                "bond_ratings",
                "sector_weights"
            )
            for key in holdings.keys()
        )
        assert isinstance(holdings["holdings"], list)
        assert all(
            all(
                key in (
                    "ticker",
                    "name",
                    "percentage"
                )
                for key in item.keys()
            )
            for item in holdings["holdings"]
        )
        assert all(
            key in (
                "average_price/earnings",
                "average_price/book",
                "average_price/sales",
                "average_price/cashflow"
            )
            for key in holdings["equity_data"]
        )
        assert all(
            key in (
                "average_maturity",
                "average_duration",
            )
            for key in holdings["bond_data"]
        )
        assert all(
            key in (
                "bb",
                "aa",
                "aaa",
                "a",
                "other",
                "b",
                "bbb",
                "below_b",
                "us_government"
            )
            for key in holdings["bond_ratings"]
        )
        assert all(
            key in (
                "real_estate",
                "consumer_cyclical",
                "basic_materials",
                "consumer_defensive",
                "technology",
                "communication_services",
                "financial_services",
                "utilities",
                "industrials",
                "energy",
                "healthcare"
            )
            for key in holdings["sector_weights"]
        )
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            print(freq)
            df = self.reader.historical_data(frequency=freq)["data"]
            assert isinstance(df, pd.DataFrame)
            assert all(isinstance(date, pd.Timestamp) for date in df.index)
            assert df.index.is_unique == True
    
    def test_missing_data(self):
        with pytest.raises(DatasetError):
            self.reader.analyst_recommendations()
        with pytest.raises(DatasetError):
            self.reader.recommendation_trend()
        with pytest.raises(DatasetError):
            self.reader.institutional_ownership()
        with pytest.raises(DatasetError):
            self.reader.fund_ownership()
        with pytest.raises(DatasetError):
            self.reader.insider_ownership()
        with pytest.raises(DatasetError):
            self.reader.ownership_breakdown()
        with pytest.raises(DatasetError):
            self.reader.insider_trades()
        with pytest.raises(DatasetError):
            self.reader.sec_filings()
        with pytest.raises(DatasetError):
            self.reader.income_statement()
        with pytest.raises(DatasetError):
            self.reader.balance_sheet()
        with pytest.raises(DatasetError):
            self.reader.cashflow_statement()
        assert self.reader.logo() == b"\n"


class TestOption:
    @classmethod
    def setup_class(cls):
        cls.reader = YahooReader("AAPL230317C00100000")

    def test_security_type(self):
        assert self.reader.security_type == "OPTION"
    
    def test_historical_data(self):
        for freq in ("1m", "2m", "5m", "15m", "30m", "60m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"):
            assert self.reader.historical_data(frequency=freq) is None
    
    def test_missing_data(self):
        assert self.reader.profile() == {}
        with pytest.raises(DatasetError):
            self.reader.analyst_recommendations()
        with pytest.raises(DatasetError):
            self.reader.recommendation_trend()
        with pytest.raises(DatasetError):
            self.reader.institutional_ownership()
        with pytest.raises(DatasetError):
            self.reader.fund_ownership()
        with pytest.raises(DatasetError):
            self.reader.insider_ownership()
        with pytest.raises(DatasetError):
            self.reader.ownership_breakdown()
        with pytest.raises(DatasetError):
            self.reader.insider_trades()
        with pytest.raises(DatasetError):
            self.reader.esg_scores()
        with pytest.raises(DatasetError):
            self.reader.sec_filings()
        with pytest.raises(DatasetError):
            self.reader.income_statement()
        with pytest.raises(DatasetError):
            self.reader.balance_sheet()
        with pytest.raises(DatasetError):
            self.reader.cashflow_statement()
        with pytest.raises(DatasetError):
            self.reader.fund_statistics()
        with pytest.raises(DatasetError):
            self.reader.holdings()
        assert self.reader.logo() == b"\n"
